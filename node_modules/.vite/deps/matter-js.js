import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/matter-js/build/matter.js
var require_matter = __commonJS({
  "node_modules/matter-js/build/matter.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("Matter", [], t) : "object" == typeof exports ? exports.Matter = t() : e.Matter = t();
    }(exports, function() {
      return function(e) {
        var t = {};
        function n(i) {
          if (t[i])
            return t[i].exports;
          var o = t[i] = { i, l: false, exports: {} };
          return e[i].call(o.exports, o, o.exports, n), o.l = true, o.exports;
        }
        return n.m = e, n.c = t, n.d = function(e2, t2, i) {
          n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: i });
        }, n.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, n.t = function(e2, t2) {
          if (1 & t2 && (e2 = n(e2)), 8 & t2)
            return e2;
          if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
            return e2;
          var i = /* @__PURE__ */ Object.create(null);
          if (n.r(i), Object.defineProperty(i, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
            for (var o in e2)
              n.d(i, o, function(t3) {
                return e2[t3];
              }.bind(null, o));
          return i;
        }, n.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return n.d(t2, "a", t2), t2;
        }, n.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, n.p = "", n(n.s = 22);
      }([function(e, t) {
        var n = {};
        e.exports = n, function() {
          n._nextId = 0, n._seed = 0, n._nowStartTime = +new Date(), n._warnedOnce = {}, n._decomp = null, n.extend = function(e3, t2) {
            var i, o;
            "boolean" == typeof t2 ? (i = 2, o = t2) : (i = 1, o = true);
            for (var r = i; r < arguments.length; r++) {
              var a = arguments[r];
              if (a)
                for (var s in a)
                  o && a[s] && a[s].constructor === Object ? e3[s] && e3[s].constructor !== Object ? e3[s] = a[s] : (e3[s] = e3[s] || {}, n.extend(e3[s], o, a[s])) : e3[s] = a[s];
            }
            return e3;
          }, n.clone = function(e3, t2) {
            return n.extend({}, t2, e3);
          }, n.keys = function(e3) {
            if (Object.keys)
              return Object.keys(e3);
            var t2 = [];
            for (var n2 in e3)
              t2.push(n2);
            return t2;
          }, n.values = function(e3) {
            var t2 = [];
            if (Object.keys) {
              for (var n2 = Object.keys(e3), i = 0; i < n2.length; i++)
                t2.push(e3[n2[i]]);
              return t2;
            }
            for (var o in e3)
              t2.push(e3[o]);
            return t2;
          }, n.get = function(e3, t2, n2, i) {
            t2 = t2.split(".").slice(n2, i);
            for (var o = 0; o < t2.length; o += 1)
              e3 = e3[t2[o]];
            return e3;
          }, n.set = function(e3, t2, i, o, r) {
            var a = t2.split(".").slice(o, r);
            return n.get(e3, t2, 0, -1)[a[a.length - 1]] = i, i;
          }, n.shuffle = function(e3) {
            for (var t2 = e3.length - 1; t2 > 0; t2--) {
              var i = Math.floor(n.random() * (t2 + 1)), o = e3[t2];
              e3[t2] = e3[i], e3[i] = o;
            }
            return e3;
          }, n.choose = function(e3) {
            return e3[Math.floor(n.random() * e3.length)];
          }, n.isElement = function(e3) {
            return "undefined" != typeof HTMLElement ? e3 instanceof HTMLElement : !!(e3 && e3.nodeType && e3.nodeName);
          }, n.isArray = function(e3) {
            return "[object Array]" === Object.prototype.toString.call(e3);
          }, n.isFunction = function(e3) {
            return "function" == typeof e3;
          }, n.isPlainObject = function(e3) {
            return "object" == typeof e3 && e3.constructor === Object;
          }, n.isString = function(e3) {
            return "[object String]" === toString.call(e3);
          }, n.clamp = function(e3, t2, n2) {
            return e3 < t2 ? t2 : e3 > n2 ? n2 : e3;
          }, n.sign = function(e3) {
            return e3 < 0 ? -1 : 1;
          }, n.now = function() {
            if ("undefined" != typeof window && window.performance) {
              if (window.performance.now)
                return window.performance.now();
              if (window.performance.webkitNow)
                return window.performance.webkitNow();
            }
            return Date.now ? Date.now() : new Date() - n._nowStartTime;
          }, n.random = function(t2, n2) {
            return n2 = void 0 !== n2 ? n2 : 1, (t2 = void 0 !== t2 ? t2 : 0) + e2() * (n2 - t2);
          };
          var e2 = function() {
            return n._seed = (9301 * n._seed + 49297) % 233280, n._seed / 233280;
          };
          n.colorToNumber = function(e3) {
            return 3 == (e3 = e3.replace("#", "")).length && (e3 = e3.charAt(0) + e3.charAt(0) + e3.charAt(1) + e3.charAt(1) + e3.charAt(2) + e3.charAt(2)), parseInt(e3, 16);
          }, n.logLevel = 1, n.log = function() {
            console && n.logLevel > 0 && n.logLevel <= 3 && console.log.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
          }, n.info = function() {
            console && n.logLevel > 0 && n.logLevel <= 2 && console.info.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
          }, n.warn = function() {
            console && n.logLevel > 0 && n.logLevel <= 3 && console.warn.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
          }, n.warnOnce = function() {
            var e3 = Array.prototype.slice.call(arguments).join(" ");
            n._warnedOnce[e3] || (n.warn(e3), n._warnedOnce[e3] = true);
          }, n.deprecated = function(e3, t2, i) {
            e3[t2] = n.chain(function() {
              n.warnOnce("\u{1F505} deprecated \u{1F505}", i);
            }, e3[t2]);
          }, n.nextId = function() {
            return n._nextId++;
          }, n.indexOf = function(e3, t2) {
            if (e3.indexOf)
              return e3.indexOf(t2);
            for (var n2 = 0; n2 < e3.length; n2++)
              if (e3[n2] === t2)
                return n2;
            return -1;
          }, n.map = function(e3, t2) {
            if (e3.map)
              return e3.map(t2);
            for (var n2 = [], i = 0; i < e3.length; i += 1)
              n2.push(t2(e3[i]));
            return n2;
          }, n.topologicalSort = function(e3) {
            var t2 = [], i = [], o = [];
            for (var r in e3)
              i[r] || o[r] || n._topologicalSort(r, i, o, e3, t2);
            return t2;
          }, n._topologicalSort = function(e3, t2, i, o, r) {
            var a = o[e3] || [];
            i[e3] = true;
            for (var s = 0; s < a.length; s += 1) {
              var l = a[s];
              i[l] || (t2[l] || n._topologicalSort(l, t2, i, o, r));
            }
            i[e3] = false, t2[e3] = true, r.push(e3);
          }, n.chain = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2 += 1) {
              var n2 = arguments[t2];
              n2._chained ? e3.push.apply(e3, n2._chained) : e3.push(n2);
            }
            var i = function() {
              for (var t3, n3 = new Array(arguments.length), i2 = 0, o = arguments.length; i2 < o; i2++)
                n3[i2] = arguments[i2];
              for (i2 = 0; i2 < e3.length; i2 += 1) {
                var r = e3[i2].apply(t3, n3);
                void 0 !== r && (t3 = r);
              }
              return t3;
            };
            return i._chained = e3, i;
          }, n.chainPathBefore = function(e3, t2, i) {
            return n.set(e3, t2, n.chain(i, n.get(e3, t2)));
          }, n.chainPathAfter = function(e3, t2, i) {
            return n.set(e3, t2, n.chain(n.get(e3, t2), i));
          }, n.setDecomp = function(e3) {
            n._decomp = e3;
          }, n.getDecomp = function() {
            var e3 = n._decomp;
            try {
              e3 || "undefined" == typeof window || (e3 = window.decomp), e3 || "undefined" == typeof global || (e3 = global.decomp);
            } catch (t2) {
              e3 = null;
            }
            return e3;
          };
        }();
      }, function(e, t) {
        var n = {};
        e.exports = n, n.create = function(e2) {
          var t2 = { min: { x: 0, y: 0 }, max: { x: 0, y: 0 } };
          return e2 && n.update(t2, e2), t2;
        }, n.update = function(e2, t2, n2) {
          e2.min.x = 1 / 0, e2.max.x = -1 / 0, e2.min.y = 1 / 0, e2.max.y = -1 / 0;
          for (var i = 0; i < t2.length; i++) {
            var o = t2[i];
            o.x > e2.max.x && (e2.max.x = o.x), o.x < e2.min.x && (e2.min.x = o.x), o.y > e2.max.y && (e2.max.y = o.y), o.y < e2.min.y && (e2.min.y = o.y);
          }
          n2 && (n2.x > 0 ? e2.max.x += n2.x : e2.min.x += n2.x, n2.y > 0 ? e2.max.y += n2.y : e2.min.y += n2.y);
        }, n.contains = function(e2, t2) {
          return t2.x >= e2.min.x && t2.x <= e2.max.x && t2.y >= e2.min.y && t2.y <= e2.max.y;
        }, n.overlaps = function(e2, t2) {
          return e2.min.x <= t2.max.x && e2.max.x >= t2.min.x && e2.max.y >= t2.min.y && e2.min.y <= t2.max.y;
        }, n.translate = function(e2, t2) {
          e2.min.x += t2.x, e2.max.x += t2.x, e2.min.y += t2.y, e2.max.y += t2.y;
        }, n.shift = function(e2, t2) {
          var n2 = e2.max.x - e2.min.x, i = e2.max.y - e2.min.y;
          e2.min.x = t2.x, e2.max.x = t2.x + n2, e2.min.y = t2.y, e2.max.y = t2.y + i;
        };
      }, function(e, t) {
        var n = {};
        e.exports = n, n.create = function(e2, t2) {
          return { x: e2 || 0, y: t2 || 0 };
        }, n.clone = function(e2) {
          return { x: e2.x, y: e2.y };
        }, n.magnitude = function(e2) {
          return Math.sqrt(e2.x * e2.x + e2.y * e2.y);
        }, n.magnitudeSquared = function(e2) {
          return e2.x * e2.x + e2.y * e2.y;
        }, n.rotate = function(e2, t2, n2) {
          var i = Math.cos(t2), o = Math.sin(t2);
          n2 || (n2 = {});
          var r = e2.x * i - e2.y * o;
          return n2.y = e2.x * o + e2.y * i, n2.x = r, n2;
        }, n.rotateAbout = function(e2, t2, n2, i) {
          var o = Math.cos(t2), r = Math.sin(t2);
          i || (i = {});
          var a = n2.x + ((e2.x - n2.x) * o - (e2.y - n2.y) * r);
          return i.y = n2.y + ((e2.x - n2.x) * r + (e2.y - n2.y) * o), i.x = a, i;
        }, n.normalise = function(e2) {
          var t2 = n.magnitude(e2);
          return 0 === t2 ? { x: 0, y: 0 } : { x: e2.x / t2, y: e2.y / t2 };
        }, n.dot = function(e2, t2) {
          return e2.x * t2.x + e2.y * t2.y;
        }, n.cross = function(e2, t2) {
          return e2.x * t2.y - e2.y * t2.x;
        }, n.cross3 = function(e2, t2, n2) {
          return (t2.x - e2.x) * (n2.y - e2.y) - (t2.y - e2.y) * (n2.x - e2.x);
        }, n.add = function(e2, t2, n2) {
          return n2 || (n2 = {}), n2.x = e2.x + t2.x, n2.y = e2.y + t2.y, n2;
        }, n.sub = function(e2, t2, n2) {
          return n2 || (n2 = {}), n2.x = e2.x - t2.x, n2.y = e2.y - t2.y, n2;
        }, n.mult = function(e2, t2) {
          return { x: e2.x * t2, y: e2.y * t2 };
        }, n.div = function(e2, t2) {
          return { x: e2.x / t2, y: e2.y / t2 };
        }, n.perp = function(e2, t2) {
          return { x: (t2 = true === t2 ? -1 : 1) * -e2.y, y: t2 * e2.x };
        }, n.neg = function(e2) {
          return { x: -e2.x, y: -e2.y };
        }, n.angle = function(e2, t2) {
          return Math.atan2(t2.y - e2.y, t2.x - e2.x);
        }, n._temp = [n.create(), n.create(), n.create(), n.create(), n.create(), n.create()];
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(2), r = n(0);
        i.create = function(e2, t2) {
          for (var n2 = [], i2 = 0; i2 < e2.length; i2++) {
            var o2 = e2[i2], r2 = { x: o2.x, y: o2.y, index: i2, body: t2, isInternal: false };
            n2.push(r2);
          }
          return n2;
        }, i.fromPath = function(e2, t2) {
          var n2 = [];
          return e2.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi, function(e3, t3, i2) {
            n2.push({ x: parseFloat(t3), y: parseFloat(i2) });
          }), i.create(n2, t2);
        }, i.centre = function(e2) {
          for (var t2, n2, r2, a = i.area(e2, true), s = { x: 0, y: 0 }, l = 0; l < e2.length; l++)
            r2 = (l + 1) % e2.length, t2 = o.cross(e2[l], e2[r2]), n2 = o.mult(o.add(e2[l], e2[r2]), t2), s = o.add(s, n2);
          return o.div(s, 6 * a);
        }, i.mean = function(e2) {
          for (var t2 = { x: 0, y: 0 }, n2 = 0; n2 < e2.length; n2++)
            t2.x += e2[n2].x, t2.y += e2[n2].y;
          return o.div(t2, e2.length);
        }, i.area = function(e2, t2) {
          for (var n2 = 0, i2 = e2.length - 1, o2 = 0; o2 < e2.length; o2++)
            n2 += (e2[i2].x - e2[o2].x) * (e2[i2].y + e2[o2].y), i2 = o2;
          return t2 ? n2 / 2 : Math.abs(n2) / 2;
        }, i.inertia = function(e2, t2) {
          for (var n2, i2, r2 = 0, a = 0, s = e2, l = 0; l < s.length; l++)
            i2 = (l + 1) % s.length, r2 += (n2 = Math.abs(o.cross(s[i2], s[l]))) * (o.dot(s[i2], s[i2]) + o.dot(s[i2], s[l]) + o.dot(s[l], s[l])), a += n2;
          return t2 / 6 * (r2 / a);
        }, i.translate = function(e2, t2, n2) {
          var i2;
          if (n2)
            for (i2 = 0; i2 < e2.length; i2++)
              e2[i2].x += t2.x * n2, e2[i2].y += t2.y * n2;
          else
            for (i2 = 0; i2 < e2.length; i2++)
              e2[i2].x += t2.x, e2[i2].y += t2.y;
          return e2;
        }, i.rotate = function(e2, t2, n2) {
          if (0 !== t2) {
            for (var i2 = Math.cos(t2), o2 = Math.sin(t2), r2 = 0; r2 < e2.length; r2++) {
              var a = e2[r2], s = a.x - n2.x, l = a.y - n2.y;
              a.x = n2.x + (s * i2 - l * o2), a.y = n2.y + (s * o2 + l * i2);
            }
            return e2;
          }
        }, i.contains = function(e2, t2) {
          for (var n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2[n2], o2 = e2[(n2 + 1) % e2.length];
            if ((t2.x - i2.x) * (o2.y - i2.y) + (t2.y - i2.y) * (i2.x - o2.x) > 0)
              return false;
          }
          return true;
        }, i.scale = function(e2, t2, n2, r2) {
          if (1 === t2 && 1 === n2)
            return e2;
          var a, s;
          r2 = r2 || i.centre(e2);
          for (var l = 0; l < e2.length; l++)
            a = e2[l], s = o.sub(a, r2), e2[l].x = r2.x + s.x * t2, e2[l].y = r2.y + s.y * n2;
          return e2;
        }, i.chamfer = function(e2, t2, n2, i2, a) {
          t2 = "number" == typeof t2 ? [t2] : t2 || [8], n2 = void 0 !== n2 ? n2 : -1, i2 = i2 || 2, a = a || 14;
          for (var s = [], l = 0; l < e2.length; l++) {
            var c = e2[l - 1 >= 0 ? l - 1 : e2.length - 1], u = e2[l], d = e2[(l + 1) % e2.length], p = t2[l < t2.length ? l : t2.length - 1];
            if (0 !== p) {
              var f = o.normalise({ x: u.y - c.y, y: c.x - u.x }), v = o.normalise({ x: d.y - u.y, y: u.x - d.x }), m = Math.sqrt(2 * Math.pow(p, 2)), y = o.mult(r.clone(f), p), g = o.normalise(o.mult(o.add(f, v), 0.5)), x = o.sub(u, o.mult(g, m)), h = n2;
              -1 === n2 && (h = 1.75 * Math.pow(p, 0.32)), (h = r.clamp(h, i2, a)) % 2 == 1 && (h += 1);
              for (var b = Math.acos(o.dot(f, v)) / h, S = 0; S < h; S++)
                s.push(o.add(o.rotate(y, b * S), x));
            } else
              s.push(u);
          }
          return s;
        }, i.clockwiseSort = function(e2) {
          var t2 = i.mean(e2);
          return e2.sort(function(e3, n2) {
            return o.angle(t2, e3) - o.angle(t2, n2);
          }), e2;
        }, i.isConvex = function(e2) {
          var t2, n2, i2, o2, r2 = 0, a = e2.length;
          if (a < 3)
            return null;
          for (t2 = 0; t2 < a; t2++)
            if (i2 = (t2 + 2) % a, o2 = (e2[n2 = (t2 + 1) % a].x - e2[t2].x) * (e2[i2].y - e2[n2].y), (o2 -= (e2[n2].y - e2[t2].y) * (e2[i2].x - e2[n2].x)) < 0 ? r2 |= 1 : o2 > 0 && (r2 |= 2), 3 === r2)
              return false;
          return 0 !== r2 || null;
        }, i.hull = function(e2) {
          var t2, n2, i2 = [], r2 = [];
          for ((e2 = e2.slice(0)).sort(function(e3, t3) {
            var n3 = e3.x - t3.x;
            return 0 !== n3 ? n3 : e3.y - t3.y;
          }), n2 = 0; n2 < e2.length; n2 += 1) {
            for (t2 = e2[n2]; r2.length >= 2 && o.cross3(r2[r2.length - 2], r2[r2.length - 1], t2) <= 0; )
              r2.pop();
            r2.push(t2);
          }
          for (n2 = e2.length - 1; n2 >= 0; n2 -= 1) {
            for (t2 = e2[n2]; i2.length >= 2 && o.cross3(i2[i2.length - 2], i2[i2.length - 1], t2) <= 0; )
              i2.pop();
            i2.push(t2);
          }
          return i2.pop(), r2.pop(), i2.concat(r2);
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(0);
        i.on = function(e2, t2, n2) {
          for (var i2, o2 = t2.split(" "), r = 0; r < o2.length; r++)
            i2 = o2[r], e2.events = e2.events || {}, e2.events[i2] = e2.events[i2] || [], e2.events[i2].push(n2);
          return n2;
        }, i.off = function(e2, t2, n2) {
          if (t2) {
            "function" == typeof t2 && (n2 = t2, t2 = o.keys(e2.events).join(" "));
            for (var i2 = t2.split(" "), r = 0; r < i2.length; r++) {
              var a = e2.events[i2[r]], s = [];
              if (n2 && a)
                for (var l = 0; l < a.length; l++)
                  a[l] !== n2 && s.push(a[l]);
              e2.events[i2[r]] = s;
            }
          } else
            e2.events = {};
        }, i.trigger = function(e2, t2, n2) {
          var i2, r, a, s, l = e2.events;
          if (l && o.keys(l).length > 0) {
            n2 || (n2 = {}), i2 = t2.split(" ");
            for (var c = 0; c < i2.length; c++)
              if (a = l[r = i2[c]]) {
                (s = o.clone(n2, false)).name = r, s.source = e2;
                for (var u = 0; u < a.length; u++)
                  a[u].apply(e2, [s]);
              }
          }
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(4), r = n(0), a = n(1), s = n(6);
        i.create = function(e2) {
          return r.extend({ id: r.nextId(), type: "composite", parent: null, isModified: false, bodies: [], constraints: [], composites: [], label: "Composite", plugin: {} }, e2);
        }, i.setModified = function(e2, t2, n2, o2) {
          if (e2.isModified = t2, n2 && e2.parent && i.setModified(e2.parent, t2, n2, o2), o2)
            for (var r2 = 0; r2 < e2.composites.length; r2++) {
              var a2 = e2.composites[r2];
              i.setModified(a2, t2, n2, o2);
            }
        }, i.add = function(e2, t2) {
          var n2 = [].concat(t2);
          o.trigger(e2, "beforeAdd", { object: t2 });
          for (var a2 = 0; a2 < n2.length; a2++) {
            var s2 = n2[a2];
            switch (s2.type) {
              case "body":
                if (s2.parent !== s2) {
                  r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");
                  break;
                }
                i.addBody(e2, s2);
                break;
              case "constraint":
                i.addConstraint(e2, s2);
                break;
              case "composite":
                i.addComposite(e2, s2);
                break;
              case "mouseConstraint":
                i.addConstraint(e2, s2.constraint);
            }
          }
          return o.trigger(e2, "afterAdd", { object: t2 }), e2;
        }, i.remove = function(e2, t2, n2) {
          var r2 = [].concat(t2);
          o.trigger(e2, "beforeRemove", { object: t2 });
          for (var a2 = 0; a2 < r2.length; a2++) {
            var s2 = r2[a2];
            switch (s2.type) {
              case "body":
                i.removeBody(e2, s2, n2);
                break;
              case "constraint":
                i.removeConstraint(e2, s2, n2);
                break;
              case "composite":
                i.removeComposite(e2, s2, n2);
                break;
              case "mouseConstraint":
                i.removeConstraint(e2, s2.constraint);
            }
          }
          return o.trigger(e2, "afterRemove", { object: t2 }), e2;
        }, i.addComposite = function(e2, t2) {
          return e2.composites.push(t2), t2.parent = e2, i.setModified(e2, true, true, false), e2;
        }, i.removeComposite = function(e2, t2, n2) {
          var o2 = r.indexOf(e2.composites, t2);
          if (-1 !== o2 && (i.removeCompositeAt(e2, o2), i.setModified(e2, true, true, false)), n2)
            for (var a2 = 0; a2 < e2.composites.length; a2++)
              i.removeComposite(e2.composites[a2], t2, true);
          return e2;
        }, i.removeCompositeAt = function(e2, t2) {
          return e2.composites.splice(t2, 1), i.setModified(e2, true, true, false), e2;
        }, i.addBody = function(e2, t2) {
          return e2.bodies.push(t2), i.setModified(e2, true, true, false), e2;
        }, i.removeBody = function(e2, t2, n2) {
          var o2 = r.indexOf(e2.bodies, t2);
          if (-1 !== o2 && (i.removeBodyAt(e2, o2), i.setModified(e2, true, true, false)), n2)
            for (var a2 = 0; a2 < e2.composites.length; a2++)
              i.removeBody(e2.composites[a2], t2, true);
          return e2;
        }, i.removeBodyAt = function(e2, t2) {
          return e2.bodies.splice(t2, 1), i.setModified(e2, true, true, false), e2;
        }, i.addConstraint = function(e2, t2) {
          return e2.constraints.push(t2), i.setModified(e2, true, true, false), e2;
        }, i.removeConstraint = function(e2, t2, n2) {
          var o2 = r.indexOf(e2.constraints, t2);
          if (-1 !== o2 && i.removeConstraintAt(e2, o2), n2)
            for (var a2 = 0; a2 < e2.composites.length; a2++)
              i.removeConstraint(e2.composites[a2], t2, true);
          return e2;
        }, i.removeConstraintAt = function(e2, t2) {
          return e2.constraints.splice(t2, 1), i.setModified(e2, true, true, false), e2;
        }, i.clear = function(e2, t2, n2) {
          if (n2)
            for (var o2 = 0; o2 < e2.composites.length; o2++)
              i.clear(e2.composites[o2], t2, true);
          return t2 ? e2.bodies = e2.bodies.filter(function(e3) {
            return e3.isStatic;
          }) : e2.bodies.length = 0, e2.constraints.length = 0, e2.composites.length = 0, i.setModified(e2, true, true, false), e2;
        }, i.allBodies = function(e2) {
          for (var t2 = [].concat(e2.bodies), n2 = 0; n2 < e2.composites.length; n2++)
            t2 = t2.concat(i.allBodies(e2.composites[n2]));
          return t2;
        }, i.allConstraints = function(e2) {
          for (var t2 = [].concat(e2.constraints), n2 = 0; n2 < e2.composites.length; n2++)
            t2 = t2.concat(i.allConstraints(e2.composites[n2]));
          return t2;
        }, i.allComposites = function(e2) {
          for (var t2 = [].concat(e2.composites), n2 = 0; n2 < e2.composites.length; n2++)
            t2 = t2.concat(i.allComposites(e2.composites[n2]));
          return t2;
        }, i.get = function(e2, t2, n2) {
          var o2, r2;
          switch (n2) {
            case "body":
              o2 = i.allBodies(e2);
              break;
            case "constraint":
              o2 = i.allConstraints(e2);
              break;
            case "composite":
              o2 = i.allComposites(e2).concat(e2);
          }
          return o2 ? 0 === (r2 = o2.filter(function(e3) {
            return e3.id.toString() === t2.toString();
          })).length ? null : r2[0] : null;
        }, i.move = function(e2, t2, n2) {
          return i.remove(e2, t2), i.add(n2, t2), e2;
        }, i.rebase = function(e2) {
          for (var t2 = i.allBodies(e2).concat(i.allConstraints(e2)).concat(i.allComposites(e2)), n2 = 0; n2 < t2.length; n2++)
            t2[n2].id = r.nextId();
          return i.setModified(e2, true, true, false), e2;
        }, i.translate = function(e2, t2, n2) {
          for (var o2 = n2 ? i.allBodies(e2) : e2.bodies, r2 = 0; r2 < o2.length; r2++)
            s.translate(o2[r2], t2);
          return i.setModified(e2, true, true, false), e2;
        }, i.rotate = function(e2, t2, n2, o2) {
          for (var r2 = Math.cos(t2), a2 = Math.sin(t2), l = o2 ? i.allBodies(e2) : e2.bodies, c = 0; c < l.length; c++) {
            var u = l[c], d = u.position.x - n2.x, p = u.position.y - n2.y;
            s.setPosition(u, { x: n2.x + (d * r2 - p * a2), y: n2.y + (d * a2 + p * r2) }), s.rotate(u, t2);
          }
          return i.setModified(e2, true, true, false), e2;
        }, i.scale = function(e2, t2, n2, o2, r2) {
          for (var a2 = r2 ? i.allBodies(e2) : e2.bodies, l = 0; l < a2.length; l++) {
            var c = a2[l], u = c.position.x - o2.x, d = c.position.y - o2.y;
            s.setPosition(c, { x: o2.x + u * t2, y: o2.y + d * n2 }), s.scale(c, t2, n2);
          }
          return i.setModified(e2, true, true, false), e2;
        }, i.bounds = function(e2) {
          for (var t2 = i.allBodies(e2), n2 = [], o2 = 0; o2 < t2.length; o2 += 1) {
            var r2 = t2[o2];
            n2.push(r2.bounds.min, r2.bounds.max);
          }
          return a.create(n2);
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(2), a = n(7), s = (n(16), n(0)), l = n(1), c = n(10);
        !function() {
          i._inertiaScale = 4, i._nextCollidingGroupId = 1, i._nextNonCollidingGroupId = -1, i._nextCategory = 1, i.create = function(t2) {
            var n2 = { id: s.nextId(), type: "body", label: "Body", parts: [], plugin: {}, angle: 0, vertices: o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"), position: { x: 0, y: 0 }, force: { x: 0, y: 0 }, torque: 0, positionImpulse: { x: 0, y: 0 }, constraintImpulse: { x: 0, y: 0, angle: 0 }, totalContacts: 0, speed: 0, angularSpeed: 0, velocity: { x: 0, y: 0 }, angularVelocity: 0, isSensor: false, isStatic: false, isSleeping: false, motion: 0, sleepThreshold: 60, density: 1e-3, restitution: 0, friction: 0.1, frictionStatic: 0.5, frictionAir: 0.01, collisionFilter: { category: 1, mask: 4294967295, group: 0 }, slop: 0.05, timeScale: 1, render: { visible: true, opacity: 1, strokeStyle: null, fillStyle: null, lineWidth: null, sprite: { xScale: 1, yScale: 1, xOffset: 0, yOffset: 0 } }, events: null, bounds: null, chamfer: null, circleRadius: 0, positionPrev: null, anglePrev: 0, parent: null, axes: null, area: 0, mass: 0, inertia: 0, _original: null }, i2 = s.extend(n2, t2);
            return e2(i2, t2), i2;
          }, i.nextGroup = function(e3) {
            return e3 ? i._nextNonCollidingGroupId-- : i._nextCollidingGroupId++;
          }, i.nextCategory = function() {
            return i._nextCategory = i._nextCategory << 1, i._nextCategory;
          };
          var e2 = function(e3, t2) {
            t2 = t2 || {}, i.set(e3, { bounds: e3.bounds || l.create(e3.vertices), positionPrev: e3.positionPrev || r.clone(e3.position), anglePrev: e3.anglePrev || e3.angle, vertices: e3.vertices, parts: e3.parts || [e3], isStatic: e3.isStatic, isSleeping: e3.isSleeping, parent: e3.parent || e3 }), o.rotate(e3.vertices, e3.angle, e3.position), c.rotate(e3.axes, e3.angle), l.update(e3.bounds, e3.vertices, e3.velocity), i.set(e3, { axes: t2.axes || e3.axes, area: t2.area || e3.area, mass: t2.mass || e3.mass, inertia: t2.inertia || e3.inertia });
            var n2 = e3.isStatic ? "#14151f" : s.choose(["#f19648", "#f5d259", "#f55a3c", "#063e7b", "#ececd1"]), a2 = e3.isStatic ? "#555" : "#ccc", u = e3.isStatic && null === e3.render.fillStyle ? 1 : 0;
            e3.render.fillStyle = e3.render.fillStyle || n2, e3.render.strokeStyle = e3.render.strokeStyle || a2, e3.render.lineWidth = e3.render.lineWidth || u, e3.render.sprite.xOffset += -(e3.bounds.min.x - e3.position.x) / (e3.bounds.max.x - e3.bounds.min.x), e3.render.sprite.yOffset += -(e3.bounds.min.y - e3.position.y) / (e3.bounds.max.y - e3.bounds.min.y);
          };
          i.set = function(e3, t2, n2) {
            var o2;
            for (o2 in "string" == typeof t2 && (o2 = t2, (t2 = {})[o2] = n2), t2)
              if (Object.prototype.hasOwnProperty.call(t2, o2))
                switch (n2 = t2[o2], o2) {
                  case "isStatic":
                    i.setStatic(e3, n2);
                    break;
                  case "isSleeping":
                    a.set(e3, n2);
                    break;
                  case "mass":
                    i.setMass(e3, n2);
                    break;
                  case "density":
                    i.setDensity(e3, n2);
                    break;
                  case "inertia":
                    i.setInertia(e3, n2);
                    break;
                  case "vertices":
                    i.setVertices(e3, n2);
                    break;
                  case "position":
                    i.setPosition(e3, n2);
                    break;
                  case "angle":
                    i.setAngle(e3, n2);
                    break;
                  case "velocity":
                    i.setVelocity(e3, n2);
                    break;
                  case "angularVelocity":
                    i.setAngularVelocity(e3, n2);
                    break;
                  case "parts":
                    i.setParts(e3, n2);
                    break;
                  case "centre":
                    i.setCentre(e3, n2);
                    break;
                  default:
                    e3[o2] = n2;
                }
          }, i.setStatic = function(e3, t2) {
            for (var n2 = 0; n2 < e3.parts.length; n2++) {
              var i2 = e3.parts[n2];
              i2.isStatic = t2, t2 ? (i2._original = { restitution: i2.restitution, friction: i2.friction, mass: i2.mass, inertia: i2.inertia, density: i2.density, inverseMass: i2.inverseMass, inverseInertia: i2.inverseInertia }, i2.restitution = 0, i2.friction = 1, i2.mass = i2.inertia = i2.density = 1 / 0, i2.inverseMass = i2.inverseInertia = 0, i2.positionPrev.x = i2.position.x, i2.positionPrev.y = i2.position.y, i2.anglePrev = i2.angle, i2.angularVelocity = 0, i2.speed = 0, i2.angularSpeed = 0, i2.motion = 0) : i2._original && (i2.restitution = i2._original.restitution, i2.friction = i2._original.friction, i2.mass = i2._original.mass, i2.inertia = i2._original.inertia, i2.density = i2._original.density, i2.inverseMass = i2._original.inverseMass, i2.inverseInertia = i2._original.inverseInertia, i2._original = null);
            }
          }, i.setMass = function(e3, t2) {
            var n2 = e3.inertia / (e3.mass / 6);
            e3.inertia = n2 * (t2 / 6), e3.inverseInertia = 1 / e3.inertia, e3.mass = t2, e3.inverseMass = 1 / e3.mass, e3.density = e3.mass / e3.area;
          }, i.setDensity = function(e3, t2) {
            i.setMass(e3, t2 * e3.area), e3.density = t2;
          }, i.setInertia = function(e3, t2) {
            e3.inertia = t2, e3.inverseInertia = 1 / e3.inertia;
          }, i.setVertices = function(e3, t2) {
            t2[0].body === e3 ? e3.vertices = t2 : e3.vertices = o.create(t2, e3), e3.axes = c.fromVertices(e3.vertices), e3.area = o.area(e3.vertices), i.setMass(e3, e3.density * e3.area);
            var n2 = o.centre(e3.vertices);
            o.translate(e3.vertices, n2, -1), i.setInertia(e3, i._inertiaScale * o.inertia(e3.vertices, e3.mass)), o.translate(e3.vertices, e3.position), l.update(e3.bounds, e3.vertices, e3.velocity);
          }, i.setParts = function(e3, t2, n2) {
            var r2;
            for (t2 = t2.slice(0), e3.parts.length = 0, e3.parts.push(e3), e3.parent = e3, r2 = 0; r2 < t2.length; r2++) {
              var a2 = t2[r2];
              a2 !== e3 && (a2.parent = e3, e3.parts.push(a2));
            }
            if (1 !== e3.parts.length) {
              if (n2 = void 0 === n2 || n2) {
                var s2 = [];
                for (r2 = 0; r2 < t2.length; r2++)
                  s2 = s2.concat(t2[r2].vertices);
                o.clockwiseSort(s2);
                var l2 = o.hull(s2), c2 = o.centre(l2);
                i.setVertices(e3, l2), o.translate(e3.vertices, c2);
              }
              var u = i._totalProperties(e3);
              e3.area = u.area, e3.parent = e3, e3.position.x = u.centre.x, e3.position.y = u.centre.y, e3.positionPrev.x = u.centre.x, e3.positionPrev.y = u.centre.y, i.setMass(e3, u.mass), i.setInertia(e3, u.inertia), i.setPosition(e3, u.centre);
            }
          }, i.setCentre = function(e3, t2, n2) {
            n2 ? (e3.positionPrev.x += t2.x, e3.positionPrev.y += t2.y, e3.position.x += t2.x, e3.position.y += t2.y) : (e3.positionPrev.x = t2.x - (e3.position.x - e3.positionPrev.x), e3.positionPrev.y = t2.y - (e3.position.y - e3.positionPrev.y), e3.position.x = t2.x, e3.position.y = t2.y);
          }, i.setPosition = function(e3, t2) {
            var n2 = r.sub(t2, e3.position);
            e3.positionPrev.x += n2.x, e3.positionPrev.y += n2.y;
            for (var i2 = 0; i2 < e3.parts.length; i2++) {
              var a2 = e3.parts[i2];
              a2.position.x += n2.x, a2.position.y += n2.y, o.translate(a2.vertices, n2), l.update(a2.bounds, a2.vertices, e3.velocity);
            }
          }, i.setAngle = function(e3, t2) {
            var n2 = t2 - e3.angle;
            e3.anglePrev += n2;
            for (var i2 = 0; i2 < e3.parts.length; i2++) {
              var a2 = e3.parts[i2];
              a2.angle += n2, o.rotate(a2.vertices, n2, e3.position), c.rotate(a2.axes, n2), l.update(a2.bounds, a2.vertices, e3.velocity), i2 > 0 && r.rotateAbout(a2.position, n2, e3.position, a2.position);
            }
          }, i.setVelocity = function(e3, t2) {
            e3.positionPrev.x = e3.position.x - t2.x, e3.positionPrev.y = e3.position.y - t2.y, e3.velocity.x = t2.x, e3.velocity.y = t2.y, e3.speed = r.magnitude(e3.velocity);
          }, i.setAngularVelocity = function(e3, t2) {
            e3.anglePrev = e3.angle - t2, e3.angularVelocity = t2, e3.angularSpeed = Math.abs(e3.angularVelocity);
          }, i.translate = function(e3, t2) {
            i.setPosition(e3, r.add(e3.position, t2));
          }, i.rotate = function(e3, t2, n2) {
            if (n2) {
              var o2 = Math.cos(t2), r2 = Math.sin(t2), a2 = e3.position.x - n2.x, s2 = e3.position.y - n2.y;
              i.setPosition(e3, { x: n2.x + (a2 * o2 - s2 * r2), y: n2.y + (a2 * r2 + s2 * o2) }), i.setAngle(e3, e3.angle + t2);
            } else
              i.setAngle(e3, e3.angle + t2);
          }, i.scale = function(e3, t2, n2, r2) {
            var a2 = 0, s2 = 0;
            r2 = r2 || e3.position;
            for (var u = 0; u < e3.parts.length; u++) {
              var d = e3.parts[u];
              o.scale(d.vertices, t2, n2, r2), d.axes = c.fromVertices(d.vertices), d.area = o.area(d.vertices), i.setMass(d, e3.density * d.area), o.translate(d.vertices, { x: -d.position.x, y: -d.position.y }), i.setInertia(d, i._inertiaScale * o.inertia(d.vertices, d.mass)), o.translate(d.vertices, { x: d.position.x, y: d.position.y }), u > 0 && (a2 += d.area, s2 += d.inertia), d.position.x = r2.x + (d.position.x - r2.x) * t2, d.position.y = r2.y + (d.position.y - r2.y) * n2, l.update(d.bounds, d.vertices, e3.velocity);
            }
            e3.parts.length > 1 && (e3.area = a2, e3.isStatic || (i.setMass(e3, e3.density * a2), i.setInertia(e3, s2))), e3.circleRadius && (t2 === n2 ? e3.circleRadius *= t2 : e3.circleRadius = null);
          }, i.update = function(e3, t2, n2, i2) {
            var a2 = Math.pow(t2 * n2 * e3.timeScale, 2), s2 = 1 - e3.frictionAir * n2 * e3.timeScale, u = e3.position.x - e3.positionPrev.x, d = e3.position.y - e3.positionPrev.y;
            e3.velocity.x = u * s2 * i2 + e3.force.x / e3.mass * a2, e3.velocity.y = d * s2 * i2 + e3.force.y / e3.mass * a2, e3.positionPrev.x = e3.position.x, e3.positionPrev.y = e3.position.y, e3.position.x += e3.velocity.x, e3.position.y += e3.velocity.y, e3.angularVelocity = (e3.angle - e3.anglePrev) * s2 * i2 + e3.torque / e3.inertia * a2, e3.anglePrev = e3.angle, e3.angle += e3.angularVelocity, e3.speed = r.magnitude(e3.velocity), e3.angularSpeed = Math.abs(e3.angularVelocity);
            for (var p = 0; p < e3.parts.length; p++) {
              var f = e3.parts[p];
              o.translate(f.vertices, e3.velocity), p > 0 && (f.position.x += e3.velocity.x, f.position.y += e3.velocity.y), 0 !== e3.angularVelocity && (o.rotate(f.vertices, e3.angularVelocity, e3.position), c.rotate(f.axes, e3.angularVelocity), p > 0 && r.rotateAbout(f.position, e3.angularVelocity, e3.position, f.position)), l.update(f.bounds, f.vertices, e3.velocity);
            }
          }, i.applyForce = function(e3, t2, n2) {
            e3.force.x += n2.x, e3.force.y += n2.y;
            var i2 = t2.x - e3.position.x, o2 = t2.y - e3.position.y;
            e3.torque += i2 * n2.y - o2 * n2.x;
          }, i._totalProperties = function(e3) {
            for (var t2 = { mass: 0, area: 0, inertia: 0, centre: { x: 0, y: 0 } }, n2 = 1 === e3.parts.length ? 0 : 1; n2 < e3.parts.length; n2++) {
              var i2 = e3.parts[n2], o2 = i2.mass !== 1 / 0 ? i2.mass : 1;
              t2.mass += o2, t2.area += i2.area, t2.inertia += i2.inertia, t2.centre = r.add(t2.centre, r.mult(i2.position, o2));
            }
            return t2.centre = r.div(t2.centre, t2.mass), t2;
          };
        }();
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(4);
        i._motionWakeThreshold = 0.18, i._motionSleepThreshold = 0.08, i._minBias = 0.9, i.update = function(e2, t2) {
          for (var n2 = t2 * t2 * t2, o2 = 0; o2 < e2.length; o2++) {
            var r = e2[o2], a = r.speed * r.speed + r.angularSpeed * r.angularSpeed;
            if (0 === r.force.x && 0 === r.force.y) {
              var s = Math.min(r.motion, a), l = Math.max(r.motion, a);
              r.motion = i._minBias * s + (1 - i._minBias) * l, r.sleepThreshold > 0 && r.motion < i._motionSleepThreshold * n2 ? (r.sleepCounter += 1, r.sleepCounter >= r.sleepThreshold && i.set(r, true)) : r.sleepCounter > 0 && (r.sleepCounter -= 1);
            } else
              i.set(r, false);
          }
        }, i.afterCollisions = function(e2, t2) {
          for (var n2 = t2 * t2 * t2, o2 = 0; o2 < e2.length; o2++) {
            var r = e2[o2];
            if (r.isActive) {
              var a = r.collision, s = a.bodyA.parent, l = a.bodyB.parent;
              if (!(s.isSleeping && l.isSleeping || s.isStatic || l.isStatic) && (s.isSleeping || l.isSleeping)) {
                var c = s.isSleeping && !s.isStatic ? s : l, u = c === s ? l : s;
                !c.isStatic && u.motion > i._motionWakeThreshold * n2 && i.set(c, false);
              }
            }
          }
        }, i.set = function(e2, t2) {
          var n2 = e2.isSleeping;
          t2 ? (e2.isSleeping = true, e2.sleepCounter = e2.sleepThreshold, e2.positionImpulse.x = 0, e2.positionImpulse.y = 0, e2.positionPrev.x = e2.position.x, e2.positionPrev.y = e2.position.y, e2.anglePrev = e2.angle, e2.speed = 0, e2.angularSpeed = 0, e2.motion = 0, n2 || o.trigger(e2, "sleepStart")) : (e2.isSleeping = false, e2.sleepCounter = 0, n2 && o.trigger(e2, "sleepEnd"));
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(2), a = n(7), s = n(1), l = n(10), c = n(0);
        i._warming = 0.4, i._torqueDampen = 1, i._minLength = 1e-6, i.create = function(e2) {
          var t2 = e2;
          t2.bodyA && !t2.pointA && (t2.pointA = { x: 0, y: 0 }), t2.bodyB && !t2.pointB && (t2.pointB = { x: 0, y: 0 });
          var n2 = t2.bodyA ? r.add(t2.bodyA.position, t2.pointA) : t2.pointA, i2 = t2.bodyB ? r.add(t2.bodyB.position, t2.pointB) : t2.pointB, o2 = r.magnitude(r.sub(n2, i2));
          t2.length = void 0 !== t2.length ? t2.length : o2, t2.id = t2.id || c.nextId(), t2.label = t2.label || "Constraint", t2.type = "constraint", t2.stiffness = t2.stiffness || (t2.length > 0 ? 1 : 0.7), t2.damping = t2.damping || 0, t2.angularStiffness = t2.angularStiffness || 0, t2.angleA = t2.bodyA ? t2.bodyA.angle : t2.angleA, t2.angleB = t2.bodyB ? t2.bodyB.angle : t2.angleB, t2.plugin = {};
          var a2 = { visible: true, lineWidth: 2, strokeStyle: "#ffffff", type: "line", anchors: true };
          return 0 === t2.length && t2.stiffness > 0.1 ? (a2.type = "pin", a2.anchors = false) : t2.stiffness < 0.9 && (a2.type = "spring"), t2.render = c.extend(a2, t2.render), t2;
        }, i.preSolveAll = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2 += 1) {
            var n2 = e2[t2], i2 = n2.constraintImpulse;
            n2.isStatic || 0 === i2.x && 0 === i2.y && 0 === i2.angle || (n2.position.x += i2.x, n2.position.y += i2.y, n2.angle += i2.angle);
          }
        }, i.solveAll = function(e2, t2) {
          for (var n2 = 0; n2 < e2.length; n2 += 1) {
            var o2 = e2[n2], r2 = !o2.bodyA || o2.bodyA && o2.bodyA.isStatic, a2 = !o2.bodyB || o2.bodyB && o2.bodyB.isStatic;
            (r2 || a2) && i.solve(e2[n2], t2);
          }
          for (n2 = 0; n2 < e2.length; n2 += 1)
            r2 = !(o2 = e2[n2]).bodyA || o2.bodyA && o2.bodyA.isStatic, a2 = !o2.bodyB || o2.bodyB && o2.bodyB.isStatic, r2 || a2 || i.solve(e2[n2], t2);
        }, i.solve = function(e2, t2) {
          var n2 = e2.bodyA, o2 = e2.bodyB, a2 = e2.pointA, s2 = e2.pointB;
          if (n2 || o2) {
            n2 && !n2.isStatic && (r.rotate(a2, n2.angle - e2.angleA, a2), e2.angleA = n2.angle), o2 && !o2.isStatic && (r.rotate(s2, o2.angle - e2.angleB, s2), e2.angleB = o2.angle);
            var l2 = a2, c2 = s2;
            if (n2 && (l2 = r.add(n2.position, a2)), o2 && (c2 = r.add(o2.position, s2)), l2 && c2) {
              var u = r.sub(l2, c2), d = r.magnitude(u);
              d < i._minLength && (d = i._minLength);
              var p, f, v, m, y, g = (d - e2.length) / d, x = e2.stiffness < 1 ? e2.stiffness * t2 : e2.stiffness, h = r.mult(u, g * x), b = (n2 ? n2.inverseMass : 0) + (o2 ? o2.inverseMass : 0), S = b + ((n2 ? n2.inverseInertia : 0) + (o2 ? o2.inverseInertia : 0));
              if (e2.damping) {
                var w = r.create();
                v = r.div(u, d), y = r.sub(o2 && r.sub(o2.position, o2.positionPrev) || w, n2 && r.sub(n2.position, n2.positionPrev) || w), m = r.dot(v, y);
              }
              n2 && !n2.isStatic && (f = n2.inverseMass / b, n2.constraintImpulse.x -= h.x * f, n2.constraintImpulse.y -= h.y * f, n2.position.x -= h.x * f, n2.position.y -= h.y * f, e2.damping && (n2.positionPrev.x -= e2.damping * v.x * m * f, n2.positionPrev.y -= e2.damping * v.y * m * f), p = r.cross(a2, h) / S * i._torqueDampen * n2.inverseInertia * (1 - e2.angularStiffness), n2.constraintImpulse.angle -= p, n2.angle -= p), o2 && !o2.isStatic && (f = o2.inverseMass / b, o2.constraintImpulse.x += h.x * f, o2.constraintImpulse.y += h.y * f, o2.position.x += h.x * f, o2.position.y += h.y * f, e2.damping && (o2.positionPrev.x += e2.damping * v.x * m * f, o2.positionPrev.y += e2.damping * v.y * m * f), p = r.cross(s2, h) / S * i._torqueDampen * o2.inverseInertia * (1 - e2.angularStiffness), o2.constraintImpulse.angle += p, o2.angle += p);
            }
          }
        }, i.postSolveAll = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var n2 = e2[t2], c2 = n2.constraintImpulse;
            if (!(n2.isStatic || 0 === c2.x && 0 === c2.y && 0 === c2.angle)) {
              a.set(n2, false);
              for (var u = 0; u < n2.parts.length; u++) {
                var d = n2.parts[u];
                o.translate(d.vertices, c2), u > 0 && (d.position.x += c2.x, d.position.y += c2.y), 0 !== c2.angle && (o.rotate(d.vertices, c2.angle, n2.position), l.rotate(d.axes, c2.angle), u > 0 && r.rotateAbout(d.position, c2.angle, n2.position, d.position)), s.update(d.bounds, d.vertices, n2.velocity);
              }
              c2.angle *= i._warming, c2.x *= i._warming, c2.y *= i._warming;
            }
          }
        }, i.pointAWorld = function(e2) {
          return { x: (e2.bodyA ? e2.bodyA.position.x : 0) + e2.pointA.x, y: (e2.bodyA ? e2.bodyA.position.y : 0) + e2.pointA.y };
        }, i.pointBWorld = function(e2) {
          return { x: (e2.bodyB ? e2.bodyB.position.x : 0) + e2.pointB.x, y: (e2.bodyB ? e2.bodyB.position.y : 0) + e2.pointB.y };
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(17);
        i.create = function(e2, t2) {
          var n2 = e2.bodyA, o2 = e2.bodyB, r = e2.parentA, a = e2.parentB, s = { id: i.id(n2, o2), bodyA: n2, bodyB: o2, contacts: {}, activeContacts: [], separation: 0, isActive: true, confirmedActive: true, isSensor: n2.isSensor || o2.isSensor, timeCreated: t2, timeUpdated: t2, inverseMass: r.inverseMass + a.inverseMass, friction: Math.min(r.friction, a.friction), frictionStatic: Math.max(r.frictionStatic, a.frictionStatic), restitution: Math.max(r.restitution, a.restitution), slop: Math.max(r.slop, a.slop) };
          return i.update(s, e2, t2), s;
        }, i.update = function(e2, t2, n2) {
          var r = e2.contacts, a = t2.supports, s = e2.activeContacts, l = t2.parentA, c = t2.parentB;
          if (e2.collision = t2, e2.inverseMass = l.inverseMass + c.inverseMass, e2.friction = Math.min(l.friction, c.friction), e2.frictionStatic = Math.max(l.frictionStatic, c.frictionStatic), e2.restitution = Math.max(l.restitution, c.restitution), e2.slop = Math.max(l.slop, c.slop), s.length = 0, t2.collided) {
            for (var u = 0; u < a.length; u++) {
              var d = a[u], p = o.id(d), f = r[p];
              f ? s.push(f) : s.push(r[p] = o.create(d));
            }
            e2.separation = t2.depth, i.setActive(e2, true, n2);
          } else
            true === e2.isActive && i.setActive(e2, false, n2);
        }, i.setActive = function(e2, t2, n2) {
          t2 ? (e2.isActive = true, e2.timeUpdated = n2) : (e2.isActive = false, e2.activeContacts.length = 0);
        }, i.id = function(e2, t2) {
          return e2.id < t2.id ? "A" + e2.id + "B" + t2.id : "A" + t2.id + "B" + e2.id;
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(2), r = n(0);
        i.fromVertices = function(e2) {
          for (var t2 = {}, n2 = 0; n2 < e2.length; n2++) {
            var i2 = (n2 + 1) % e2.length, a = o.normalise({ x: e2[i2].y - e2[n2].y, y: e2[n2].x - e2[i2].x }), s = 0 === a.y ? 1 / 0 : a.x / a.y;
            t2[s = s.toFixed(3).toString()] = a;
          }
          return r.values(t2);
        }, i.rotate = function(e2, t2) {
          if (0 !== t2)
            for (var n2 = Math.cos(t2), i2 = Math.sin(t2), o2 = 0; o2 < e2.length; o2++) {
              var r2, a = e2[o2];
              r2 = a.x * n2 - a.y * i2, a.y = a.x * i2 + a.y * n2, a.x = r2;
            }
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(0), a = n(6), s = n(1), l = n(2);
        i.rectangle = function(e2, t2, n2, i2, s2) {
          s2 = s2 || {};
          var l2 = { label: "Rectangle Body", position: { x: e2, y: t2 }, vertices: o.fromPath("L 0 0 L " + n2 + " 0 L " + n2 + " " + i2 + " L 0 " + i2) };
          if (s2.chamfer) {
            var c = s2.chamfer;
            l2.vertices = o.chamfer(l2.vertices, c.radius, c.quality, c.qualityMin, c.qualityMax), delete s2.chamfer;
          }
          return a.create(r.extend({}, l2, s2));
        }, i.trapezoid = function(e2, t2, n2, i2, s2, l2) {
          l2 = l2 || {};
          var c, u = n2 * (s2 *= 0.5), d = u + (1 - 2 * s2) * n2, p = d + u;
          c = s2 < 0.5 ? "L 0 0 L " + u + " " + -i2 + " L " + d + " " + -i2 + " L " + p + " 0" : "L 0 0 L " + d + " " + -i2 + " L " + p + " 0";
          var f = { label: "Trapezoid Body", position: { x: e2, y: t2 }, vertices: o.fromPath(c) };
          if (l2.chamfer) {
            var v = l2.chamfer;
            f.vertices = o.chamfer(f.vertices, v.radius, v.quality, v.qualityMin, v.qualityMax), delete l2.chamfer;
          }
          return a.create(r.extend({}, f, l2));
        }, i.circle = function(e2, t2, n2, o2, a2) {
          o2 = o2 || {};
          var s2 = { label: "Circle Body", circleRadius: n2 };
          a2 = a2 || 25;
          var l2 = Math.ceil(Math.max(10, Math.min(a2, n2)));
          return l2 % 2 == 1 && (l2 += 1), i.polygon(e2, t2, l2, n2, r.extend({}, s2, o2));
        }, i.polygon = function(e2, t2, n2, s2, l2) {
          if (l2 = l2 || {}, n2 < 3)
            return i.circle(e2, t2, s2, l2);
          for (var c = 2 * Math.PI / n2, u = "", d = 0.5 * c, p = 0; p < n2; p += 1) {
            var f = d + p * c, v = Math.cos(f) * s2, m = Math.sin(f) * s2;
            u += "L " + v.toFixed(3) + " " + m.toFixed(3) + " ";
          }
          var y = { label: "Polygon Body", position: { x: e2, y: t2 }, vertices: o.fromPath(u) };
          if (l2.chamfer) {
            var g = l2.chamfer;
            y.vertices = o.chamfer(y.vertices, g.radius, g.quality, g.qualityMin, g.qualityMax), delete l2.chamfer;
          }
          return a.create(r.extend({}, y, l2));
        }, i.fromVertices = function(e2, t2, n2, i2, c, u, d, p) {
          var f, v, m, y, g, x, h, b, S, w, A = r.getDecomp();
          for (f = Boolean(A && A.quickDecomp), i2 = i2 || {}, m = [], c = void 0 !== c && c, u = void 0 !== u ? u : 0.01, d = void 0 !== d ? d : 10, p = void 0 !== p ? p : 0.01, r.isArray(n2[0]) || (n2 = [n2]), S = 0; S < n2.length; S += 1)
            if (g = n2[S], !(y = o.isConvex(g)) && !f && r.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."), y || !f)
              g = y ? o.clockwiseSort(g) : o.hull(g), m.push({ position: { x: e2, y: t2 }, vertices: g });
            else {
              var P = g.map(function(e3) {
                return [e3.x, e3.y];
              });
              A.makeCCW(P), false !== u && A.removeCollinearPoints(P, u), false !== p && A.removeDuplicatePoints && A.removeDuplicatePoints(P, p);
              var M = A.quickDecomp(P);
              for (x = 0; x < M.length; x++) {
                var C = M[x].map(function(e3) {
                  return { x: e3[0], y: e3[1] };
                });
                d > 0 && o.area(C) < d || m.push({ position: o.centre(C), vertices: C });
              }
            }
          for (x = 0; x < m.length; x++)
            m[x] = a.create(r.extend(m[x], i2));
          if (c)
            for (x = 0; x < m.length; x++) {
              var B = m[x];
              for (h = x + 1; h < m.length; h++) {
                var _ = m[h];
                if (s.overlaps(B.bounds, _.bounds)) {
                  var k = B.vertices, I = _.vertices;
                  for (b = 0; b < B.vertices.length; b++)
                    for (w = 0; w < _.vertices.length; w++) {
                      var T = l.magnitudeSquared(l.sub(k[(b + 1) % k.length], I[w])), R = l.magnitudeSquared(l.sub(k[b], I[(w + 1) % I.length]));
                      T < 5 && R < 5 && (k[b].isInternal = true, I[w].isInternal = true);
                    }
                }
              }
            }
          return m.length > 1 ? (v = a.create(r.extend({ parts: m.slice(0) }, i2)), a.setPosition(v, { x: e2, y: t2 }), v) : m[0];
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(0);
        i.create = function(e2) {
          var t2 = {};
          return e2 || o.log("Mouse.create: element was undefined, defaulting to document.body", "warn"), t2.element = e2 || document.body, t2.absolute = { x: 0, y: 0 }, t2.position = { x: 0, y: 0 }, t2.mousedownPosition = { x: 0, y: 0 }, t2.mouseupPosition = { x: 0, y: 0 }, t2.offset = { x: 0, y: 0 }, t2.scale = { x: 1, y: 1 }, t2.wheelDelta = 0, t2.button = -1, t2.pixelRatio = parseInt(t2.element.getAttribute("data-pixel-ratio"), 10) || 1, t2.sourceEvents = { mousemove: null, mousedown: null, mouseup: null, mousewheel: null }, t2.mousemove = function(e3) {
            var n2 = i._getRelativeMousePosition(e3, t2.element, t2.pixelRatio);
            e3.changedTouches && (t2.button = 0, e3.preventDefault()), t2.absolute.x = n2.x, t2.absolute.y = n2.y, t2.position.x = t2.absolute.x * t2.scale.x + t2.offset.x, t2.position.y = t2.absolute.y * t2.scale.y + t2.offset.y, t2.sourceEvents.mousemove = e3;
          }, t2.mousedown = function(e3) {
            var n2 = i._getRelativeMousePosition(e3, t2.element, t2.pixelRatio);
            e3.changedTouches ? (t2.button = 0, e3.preventDefault()) : t2.button = e3.button, t2.absolute.x = n2.x, t2.absolute.y = n2.y, t2.position.x = t2.absolute.x * t2.scale.x + t2.offset.x, t2.position.y = t2.absolute.y * t2.scale.y + t2.offset.y, t2.mousedownPosition.x = t2.position.x, t2.mousedownPosition.y = t2.position.y, t2.sourceEvents.mousedown = e3;
          }, t2.mouseup = function(e3) {
            var n2 = i._getRelativeMousePosition(e3, t2.element, t2.pixelRatio);
            e3.changedTouches && e3.preventDefault(), t2.button = -1, t2.absolute.x = n2.x, t2.absolute.y = n2.y, t2.position.x = t2.absolute.x * t2.scale.x + t2.offset.x, t2.position.y = t2.absolute.y * t2.scale.y + t2.offset.y, t2.mouseupPosition.x = t2.position.x, t2.mouseupPosition.y = t2.position.y, t2.sourceEvents.mouseup = e3;
          }, t2.mousewheel = function(e3) {
            t2.wheelDelta = Math.max(-1, Math.min(1, e3.wheelDelta || -e3.detail)), e3.preventDefault();
          }, i.setElement(t2, t2.element), t2;
        }, i.setElement = function(e2, t2) {
          e2.element = t2, t2.addEventListener("mousemove", e2.mousemove), t2.addEventListener("mousedown", e2.mousedown), t2.addEventListener("mouseup", e2.mouseup), t2.addEventListener("mousewheel", e2.mousewheel), t2.addEventListener("DOMMouseScroll", e2.mousewheel), t2.addEventListener("touchmove", e2.mousemove), t2.addEventListener("touchstart", e2.mousedown), t2.addEventListener("touchend", e2.mouseup);
        }, i.clearSourceEvents = function(e2) {
          e2.sourceEvents.mousemove = null, e2.sourceEvents.mousedown = null, e2.sourceEvents.mouseup = null, e2.sourceEvents.mousewheel = null, e2.wheelDelta = 0;
        }, i.setOffset = function(e2, t2) {
          e2.offset.x = t2.x, e2.offset.y = t2.y, e2.position.x = e2.absolute.x * e2.scale.x + e2.offset.x, e2.position.y = e2.absolute.y * e2.scale.y + e2.offset.y;
        }, i.setScale = function(e2, t2) {
          e2.scale.x = t2.x, e2.scale.y = t2.y, e2.position.x = e2.absolute.x * e2.scale.x + e2.offset.x, e2.position.y = e2.absolute.y * e2.scale.y + e2.offset.y;
        }, i._getRelativeMousePosition = function(e2, t2, n2) {
          var i2, o2, r = t2.getBoundingClientRect(), a = document.documentElement || document.body.parentNode || document.body, s = void 0 !== window.pageXOffset ? window.pageXOffset : a.scrollLeft, l = void 0 !== window.pageYOffset ? window.pageYOffset : a.scrollTop, c = e2.changedTouches;
          return c ? (i2 = c[0].pageX - r.left - s, o2 = c[0].pageY - r.top - l) : (i2 = e2.pageX - r.left - s, o2 = e2.pageY - r.top - l), { x: i2 / (t2.clientWidth / (t2.width || t2.clientWidth) * n2), y: o2 / (t2.clientHeight / (t2.height || t2.clientHeight) * n2) };
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(14), r = n(9), a = n(1);
        i.collisions = function(e2, t2) {
          for (var n2 = [], s = t2.pairs.table, l = 0; l < e2.length; l++) {
            var c = e2[l][0], u = e2[l][1];
            if ((!c.isStatic && !c.isSleeping || !u.isStatic && !u.isSleeping) && i.canCollide(c.collisionFilter, u.collisionFilter) && a.overlaps(c.bounds, u.bounds))
              for (var d = c.parts.length > 1 ? 1 : 0; d < c.parts.length; d++)
                for (var p = c.parts[d], f = u.parts.length > 1 ? 1 : 0; f < u.parts.length; f++) {
                  var v = u.parts[f];
                  if (p === c && v === u || a.overlaps(p.bounds, v.bounds)) {
                    var m, y = s[r.id(p, v)];
                    m = y && y.isActive ? y.collision : null;
                    var g = o.collides(p, v, m);
                    g.collided && n2.push(g);
                  }
                }
          }
          return n2;
        }, i.canCollide = function(e2, t2) {
          return e2.group === t2.group && 0 !== e2.group ? e2.group > 0 : 0 != (e2.mask & t2.category) && 0 != (t2.mask & e2.category);
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(2);
        i.collides = function(e2, t2, n2) {
          var a, s, l, c, u = false;
          if (n2) {
            var d = e2.parent, p = t2.parent, f = d.speed * d.speed + d.angularSpeed * d.angularSpeed + p.speed * p.speed + p.angularSpeed * p.angularSpeed;
            u = n2 && n2.collided && f < 0.2, c = n2;
          } else
            c = { collided: false, bodyA: e2, bodyB: t2 };
          if (n2 && u) {
            var v = c.axisBody, m = v === e2 ? t2 : e2, y = [v.axes[n2.axisNumber]];
            if (l = i._overlapAxes(v.vertices, m.vertices, y), c.reused = true, l.overlap <= 0)
              return c.collided = false, c;
          } else {
            if ((a = i._overlapAxes(e2.vertices, t2.vertices, e2.axes)).overlap <= 0)
              return c.collided = false, c;
            if ((s = i._overlapAxes(t2.vertices, e2.vertices, t2.axes)).overlap <= 0)
              return c.collided = false, c;
            a.overlap < s.overlap ? (l = a, c.axisBody = e2) : (l = s, c.axisBody = t2), c.axisNumber = l.axisNumber;
          }
          c.bodyA = e2.id < t2.id ? e2 : t2, c.bodyB = e2.id < t2.id ? t2 : e2, c.collided = true, c.depth = l.overlap, c.parentA = c.bodyA.parent, c.parentB = c.bodyB.parent, e2 = c.bodyA, t2 = c.bodyB, r.dot(l.axis, r.sub(t2.position, e2.position)) < 0 ? c.normal = { x: l.axis.x, y: l.axis.y } : c.normal = { x: -l.axis.x, y: -l.axis.y }, c.tangent = r.perp(c.normal), c.penetration = c.penetration || {}, c.penetration.x = c.normal.x * c.depth, c.penetration.y = c.normal.y * c.depth;
          var g = i._findSupports(e2, t2, c.normal), x = [];
          if (o.contains(e2.vertices, g[0]) && x.push(g[0]), o.contains(e2.vertices, g[1]) && x.push(g[1]), x.length < 2) {
            var h = i._findSupports(t2, e2, r.neg(c.normal));
            o.contains(t2.vertices, h[0]) && x.push(h[0]), x.length < 2 && o.contains(t2.vertices, h[1]) && x.push(h[1]);
          }
          return x.length < 1 && (x = [g[0]]), c.supports = x, c;
        }, i._overlapAxes = function(e2, t2, n2) {
          for (var o2, a, s = r._temp[0], l = r._temp[1], c = { overlap: Number.MAX_VALUE }, u = 0; u < n2.length; u++) {
            if (a = n2[u], i._projectToAxis(s, e2, a), i._projectToAxis(l, t2, a), (o2 = Math.min(s.max - l.min, l.max - s.min)) <= 0)
              return c.overlap = o2, c;
            o2 < c.overlap && (c.overlap = o2, c.axis = a, c.axisNumber = u);
          }
          return c;
        }, i._projectToAxis = function(e2, t2, n2) {
          for (var i2 = r.dot(t2[0], n2), o2 = i2, a = 1; a < t2.length; a += 1) {
            var s = r.dot(t2[a], n2);
            s > o2 ? o2 = s : s < i2 && (i2 = s);
          }
          e2.min = i2, e2.max = o2;
        }, i._findSupports = function(e2, t2, n2) {
          for (var i2, o2, a, s, l = Number.MAX_VALUE, c = r._temp[0], u = t2.vertices, d = e2.position, p = 0; p < u.length; p++)
            o2 = u[p], c.x = o2.x - d.x, c.y = o2.y - d.y, (i2 = -r.dot(n2, c)) < l && (l = i2, a = o2);
          return o2 = u[a.index - 1 >= 0 ? a.index - 1 : u.length - 1], c.x = o2.x - d.x, c.y = o2.y - d.y, l = -r.dot(n2, c), s = o2, o2 = u[(a.index + 1) % u.length], c.x = o2.x - d.x, c.y = o2.y - d.y, (i2 = -r.dot(n2, c)) < l && (s = o2), [a, s];
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(0);
        i._registry = {}, i.register = function(e2) {
          if (i.isPlugin(e2) || o.warn("Plugin.register:", i.toString(e2), "does not implement all required fields."), e2.name in i._registry) {
            var t2 = i._registry[e2.name], n2 = i.versionParse(e2.version).number, r = i.versionParse(t2.version).number;
            n2 > r ? (o.warn("Plugin.register:", i.toString(t2), "was upgraded to", i.toString(e2)), i._registry[e2.name] = e2) : n2 < r ? o.warn("Plugin.register:", i.toString(t2), "can not be downgraded to", i.toString(e2)) : e2 !== t2 && o.warn("Plugin.register:", i.toString(e2), "is already registered to different plugin object");
          } else
            i._registry[e2.name] = e2;
          return e2;
        }, i.resolve = function(e2) {
          return i._registry[i.dependencyParse(e2).name];
        }, i.toString = function(e2) {
          return "string" == typeof e2 ? e2 : (e2.name || "anonymous") + "@" + (e2.version || e2.range || "0.0.0");
        }, i.isPlugin = function(e2) {
          return e2 && e2.name && e2.version && e2.install;
        }, i.isUsed = function(e2, t2) {
          return e2.used.indexOf(t2) > -1;
        }, i.isFor = function(e2, t2) {
          var n2 = e2.for && i.dependencyParse(e2.for);
          return !e2.for || t2.name === n2.name && i.versionSatisfies(t2.version, n2.range);
        }, i.use = function(e2, t2) {
          if (e2.uses = (e2.uses || []).concat(t2 || []), 0 !== e2.uses.length) {
            for (var n2 = i.dependencies(e2), r = o.topologicalSort(n2), a = [], s = 0; s < r.length; s += 1)
              if (r[s] !== e2.name) {
                var l = i.resolve(r[s]);
                l ? i.isUsed(e2, l.name) || (i.isFor(l, e2) || (o.warn("Plugin.use:", i.toString(l), "is for", l.for, "but installed on", i.toString(e2) + "."), l._warned = true), l.install ? l.install(e2) : (o.warn("Plugin.use:", i.toString(l), "does not specify an install function."), l._warned = true), l._warned ? (a.push("\u{1F536} " + i.toString(l)), delete l._warned) : a.push("\u2705 " + i.toString(l)), e2.used.push(l.name)) : a.push("\u274C " + r[s]);
              }
            a.length > 0 && o.info(a.join("  "));
          } else
            o.warn("Plugin.use:", i.toString(e2), "does not specify any dependencies to install.");
        }, i.dependencies = function(e2, t2) {
          var n2 = i.dependencyParse(e2), r = n2.name;
          if (!(r in (t2 = t2 || {}))) {
            e2 = i.resolve(e2) || e2, t2[r] = o.map(e2.uses || [], function(t3) {
              i.isPlugin(t3) && i.register(t3);
              var r2 = i.dependencyParse(t3), a2 = i.resolve(t3);
              return a2 && !i.versionSatisfies(a2.version, r2.range) ? (o.warn("Plugin.dependencies:", i.toString(a2), "does not satisfy", i.toString(r2), "used by", i.toString(n2) + "."), a2._warned = true, e2._warned = true) : a2 || (o.warn("Plugin.dependencies:", i.toString(t3), "used by", i.toString(n2), "could not be resolved."), e2._warned = true), r2.name;
            });
            for (var a = 0; a < t2[r].length; a += 1)
              i.dependencies(t2[r][a], t2);
            return t2;
          }
        }, i.dependencyParse = function(e2) {
          return o.isString(e2) ? (/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(e2) || o.warn("Plugin.dependencyParse:", e2, "is not a valid dependency string."), { name: e2.split("@")[0], range: e2.split("@")[1] || "*" }) : { name: e2.name, range: e2.range || e2.version };
        }, i.versionParse = function(e2) {
          var t2 = /^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-]+)?$/;
          t2.test(e2) || o.warn("Plugin.versionParse:", e2, "is not a valid version or range.");
          var n2 = t2.exec(e2), i2 = Number(n2[4]), r = Number(n2[5]), a = Number(n2[6]);
          return { isRange: Boolean(n2[1] || n2[2]), version: n2[3], range: e2, operator: n2[1] || n2[2] || "", major: i2, minor: r, patch: a, parts: [i2, r, a], prerelease: n2[7], number: 1e8 * i2 + 1e4 * r + a };
        }, i.versionSatisfies = function(e2, t2) {
          t2 = t2 || "*";
          var n2 = i.versionParse(t2), o2 = i.versionParse(e2);
          if (n2.isRange) {
            if ("*" === n2.operator || "*" === e2)
              return true;
            if (">" === n2.operator)
              return o2.number > n2.number;
            if (">=" === n2.operator)
              return o2.number >= n2.number;
            if ("~" === n2.operator)
              return o2.major === n2.major && o2.minor === n2.minor && o2.patch >= n2.patch;
            if ("^" === n2.operator)
              return n2.major > 0 ? o2.major === n2.major && o2.number >= n2.number : n2.minor > 0 ? o2.minor === n2.minor && o2.patch >= n2.patch : o2.patch === n2.patch;
          }
          return e2 === t2 || "*" === e2;
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(0), r = n(5), a = n(1), s = n(4), l = n(2), c = n(12);
        !function() {
          var e2, t2;
          "undefined" != typeof window && (e2 = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(e3) {
            window.setTimeout(function() {
              e3(o.now());
            }, 1e3 / 60);
          }, t2 = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame), i._goodFps = 30, i._goodDelta = 1e3 / 60, i.create = function(e3) {
            var t3 = { controller: i, engine: null, element: null, canvas: null, mouse: null, frameRequestId: null, timing: { historySize: 60, delta: 0, deltaHistory: [], lastTime: 0, lastTimestamp: 0, lastElapsed: 0, timestampElapsed: 0, timestampElapsedHistory: [], engineDeltaHistory: [], engineElapsedHistory: [], elapsedHistory: [] }, options: { width: 800, height: 600, pixelRatio: 1, background: "#14151f", wireframeBackground: "#14151f", hasBounds: !!e3.bounds, enabled: true, wireframes: true, showSleeping: true, showDebug: false, showStats: false, showPerformance: false, showBroadphase: false, showBounds: false, showVelocity: false, showCollisions: false, showSeparations: false, showAxes: false, showPositions: false, showAngleIndicator: false, showIds: false, showVertexNumbers: false, showConvexHulls: false, showInternalEdges: false, showMousePosition: false } }, n3 = o.extend(t3, e3);
            return n3.canvas && (n3.canvas.width = n3.options.width || n3.canvas.width, n3.canvas.height = n3.options.height || n3.canvas.height), n3.mouse = e3.mouse, n3.engine = e3.engine, n3.canvas = n3.canvas || d(n3.options.width, n3.options.height), n3.context = n3.canvas.getContext("2d"), n3.textures = {}, n3.bounds = n3.bounds || { min: { x: 0, y: 0 }, max: { x: n3.canvas.width, y: n3.canvas.height } }, 1 !== n3.options.pixelRatio && i.setPixelRatio(n3, n3.options.pixelRatio), o.isElement(n3.element) ? n3.element.appendChild(n3.canvas) : n3.canvas.parentNode || o.log("Render.create: options.element was undefined, render.canvas was created but not appended", "warn"), n3;
          }, i.run = function(t3) {
            !function o2(r2) {
              t3.frameRequestId = e2(o2), n2(t3, r2), i.world(t3, r2), (t3.options.showStats || t3.options.showDebug) && i.stats(t3, t3.context, r2), (t3.options.showPerformance || t3.options.showDebug) && i.performance(t3, t3.context, r2);
            }();
          }, i.stop = function(e3) {
            t2(e3.frameRequestId);
          }, i.setPixelRatio = function(e3, t3) {
            var n3 = e3.options, i2 = e3.canvas;
            "auto" === t3 && (t3 = p(i2)), n3.pixelRatio = t3, i2.setAttribute("data-pixel-ratio", t3), i2.width = n3.width * t3, i2.height = n3.height * t3, i2.style.width = n3.width + "px", i2.style.height = n3.height + "px";
          }, i.lookAt = function(e3, t3, n3, i2) {
            i2 = void 0 === i2 || i2, t3 = o.isArray(t3) ? t3 : [t3], n3 = n3 || { x: 0, y: 0 };
            for (var r2 = { min: { x: 1 / 0, y: 1 / 0 }, max: { x: -1 / 0, y: -1 / 0 } }, a2 = 0; a2 < t3.length; a2 += 1) {
              var s2 = t3[a2], l2 = s2.bounds ? s2.bounds.min : s2.min || s2.position || s2, u2 = s2.bounds ? s2.bounds.max : s2.max || s2.position || s2;
              l2 && u2 && (l2.x < r2.min.x && (r2.min.x = l2.x), u2.x > r2.max.x && (r2.max.x = u2.x), l2.y < r2.min.y && (r2.min.y = l2.y), u2.y > r2.max.y && (r2.max.y = u2.y));
            }
            var d2 = r2.max.x - r2.min.x + 2 * n3.x, p2 = r2.max.y - r2.min.y + 2 * n3.y, f2 = e3.canvas.height, v2 = e3.canvas.width / f2, m = d2 / p2, y = 1, g = 1;
            m > v2 ? g = m / v2 : y = v2 / m, e3.options.hasBounds = true, e3.bounds.min.x = r2.min.x, e3.bounds.max.x = r2.min.x + d2 * y, e3.bounds.min.y = r2.min.y, e3.bounds.max.y = r2.min.y + p2 * g, i2 && (e3.bounds.min.x += 0.5 * d2 - d2 * y * 0.5, e3.bounds.max.x += 0.5 * d2 - d2 * y * 0.5, e3.bounds.min.y += 0.5 * p2 - p2 * g * 0.5, e3.bounds.max.y += 0.5 * p2 - p2 * g * 0.5), e3.bounds.min.x -= n3.x, e3.bounds.max.x -= n3.x, e3.bounds.min.y -= n3.y, e3.bounds.max.y -= n3.y, e3.mouse && (c.setScale(e3.mouse, { x: (e3.bounds.max.x - e3.bounds.min.x) / e3.canvas.width, y: (e3.bounds.max.y - e3.bounds.min.y) / e3.canvas.height }), c.setOffset(e3.mouse, e3.bounds.min));
          }, i.startViewTransform = function(e3) {
            var t3 = e3.bounds.max.x - e3.bounds.min.x, n3 = e3.bounds.max.y - e3.bounds.min.y, i2 = t3 / e3.options.width, o2 = n3 / e3.options.height;
            e3.context.setTransform(e3.options.pixelRatio / i2, 0, 0, e3.options.pixelRatio / o2, 0, 0), e3.context.translate(-e3.bounds.min.x, -e3.bounds.min.y);
          }, i.endViewTransform = function(e3) {
            e3.context.setTransform(e3.options.pixelRatio, 0, 0, e3.options.pixelRatio, 0, 0);
          }, i.world = function(e3, t3) {
            var n3, u2 = o.now(), d2 = e3.engine, p2 = d2.world, f2 = e3.canvas, m = e3.context, y = e3.options, g = e3.timing, x = r.allBodies(p2), h = r.allConstraints(p2), b = y.wireframes ? y.wireframeBackground : y.background, S = [], w = [], A = { timestamp: d2.timing.timestamp };
            if (s.trigger(e3, "beforeRender", A), e3.currentBackground !== b && v(e3, b), m.globalCompositeOperation = "source-in", m.fillStyle = "transparent", m.fillRect(0, 0, f2.width, f2.height), m.globalCompositeOperation = "source-over", y.hasBounds) {
              for (n3 = 0; n3 < x.length; n3++) {
                var P = x[n3];
                a.overlaps(P.bounds, e3.bounds) && S.push(P);
              }
              for (n3 = 0; n3 < h.length; n3++) {
                var M = h[n3], C = M.bodyA, B = M.bodyB, _ = M.pointA, k = M.pointB;
                C && (_ = l.add(C.position, M.pointA)), B && (k = l.add(B.position, M.pointB)), _ && k && ((a.contains(e3.bounds, _) || a.contains(e3.bounds, k)) && w.push(M));
              }
              i.startViewTransform(e3), e3.mouse && (c.setScale(e3.mouse, { x: (e3.bounds.max.x - e3.bounds.min.x) / e3.options.width, y: (e3.bounds.max.y - e3.bounds.min.y) / e3.options.height }), c.setOffset(e3.mouse, e3.bounds.min));
            } else
              w = h, S = x, 1 !== e3.options.pixelRatio && e3.context.setTransform(e3.options.pixelRatio, 0, 0, e3.options.pixelRatio, 0, 0);
            !y.wireframes || d2.enableSleeping && y.showSleeping ? i.bodies(e3, S, m) : (y.showConvexHulls && i.bodyConvexHulls(e3, S, m), i.bodyWireframes(e3, S, m)), y.showBounds && i.bodyBounds(e3, S, m), (y.showAxes || y.showAngleIndicator) && i.bodyAxes(e3, S, m), y.showPositions && i.bodyPositions(e3, S, m), y.showVelocity && i.bodyVelocity(e3, S, m), y.showIds && i.bodyIds(e3, S, m), y.showSeparations && i.separations(e3, d2.pairs.list, m), y.showCollisions && i.collisions(e3, d2.pairs.list, m), y.showVertexNumbers && i.vertexNumbers(e3, S, m), y.showMousePosition && i.mousePosition(e3, e3.mouse, m), i.constraints(w, m), y.showBroadphase && i.grid(e3, d2.grid, m), y.hasBounds && i.endViewTransform(e3), s.trigger(e3, "afterRender", A), g.lastElapsed = o.now() - u2;
          }, i.stats = function(e3, t3, n3) {
            for (var i2 = e3.engine, o2 = i2.world, a2 = r.allBodies(o2), s2 = 0, l2 = 0, c2 = 0; c2 < a2.length; c2 += 1)
              s2 += a2[c2].parts.length;
            var u2 = { Part: s2, Body: a2.length, Cons: r.allConstraints(o2).length, Comp: r.allComposites(o2).length, Pair: i2.pairs.list.length };
            for (var d2 in t3.fillStyle = "#0e0f19", t3.fillRect(l2, 0, 302.5, 44), t3.font = "12px Arial", t3.textBaseline = "top", t3.textAlign = "right", u2) {
              var p2 = u2[d2];
              t3.fillStyle = "#aaa", t3.fillText(d2, l2 + 55, 8), t3.fillStyle = "#eee", t3.fillText(p2, l2 + 55, 26), l2 += 55;
            }
          }, i.performance = function(e3, t3) {
            var n3 = e3.engine, o2 = e3.timing, r2 = o2.deltaHistory, a2 = o2.elapsedHistory, s2 = o2.timestampElapsedHistory, l2 = o2.engineDeltaHistory, c2 = o2.engineElapsedHistory, d2 = n3.timing.lastDelta, p2 = u(r2), f2 = u(a2), v2 = u(l2), m = u(c2), y = u(s2) / p2 || 0, g = 1e3 / p2 || 0;
            t3.fillStyle = "#0e0f19", t3.fillRect(0, 50, 370, 34), i.status(t3, 10, 69, 60, 4, r2.length, Math.round(g) + " fps", g / i._goodFps, function(e4) {
              return r2[e4] / p2 - 1;
            }), i.status(t3, 82, 69, 60, 4, l2.length, d2.toFixed(2) + " dt", i._goodDelta / d2, function(e4) {
              return l2[e4] / v2 - 1;
            }), i.status(t3, 154, 69, 60, 4, c2.length, m.toFixed(2) + " ut", 1 - m / i._goodFps, function(e4) {
              return c2[e4] / m - 1;
            }), i.status(t3, 226, 69, 60, 4, a2.length, f2.toFixed(2) + " rt", 1 - f2 / i._goodFps, function(e4) {
              return a2[e4] / f2 - 1;
            }), i.status(t3, 298, 69, 60, 4, s2.length, y.toFixed(2) + " x", y * y * y, function(e4) {
              return (s2[e4] / r2[e4] / y || 0) - 1;
            });
          }, i.status = function(e3, t3, n3, i2, r2, a2, s2, l2, c2) {
            e3.strokeStyle = "#888", e3.fillStyle = "#444", e3.lineWidth = 1, e3.fillRect(t3, n3 + 7, i2, 1), e3.beginPath(), e3.moveTo(t3, n3 + 7 - r2 * o.clamp(0.4 * c2(0), -2, 2));
            for (var u2 = 0; u2 < i2; u2 += 1)
              e3.lineTo(t3 + u2, n3 + 7 - (u2 < a2 ? r2 * o.clamp(0.4 * c2(u2), -2, 2) : 0));
            e3.stroke(), e3.fillStyle = "hsl(" + o.clamp(25 + 95 * l2, 0, 120) + ",100%,60%)", e3.fillRect(t3, n3 - 7, 4, 4), e3.font = "12px Arial", e3.textBaseline = "middle", e3.textAlign = "right", e3.fillStyle = "#eee", e3.fillText(s2, t3 + i2, n3 - 5);
          }, i.constraints = function(e3, t3) {
            for (var n3 = t3, i2 = 0; i2 < e3.length; i2++) {
              var r2 = e3[i2];
              if (r2.render.visible && r2.pointA && r2.pointB) {
                var a2, s2, c2 = r2.bodyA, u2 = r2.bodyB;
                if (a2 = c2 ? l.add(c2.position, r2.pointA) : r2.pointA, "pin" === r2.render.type)
                  n3.beginPath(), n3.arc(a2.x, a2.y, 3, 0, 2 * Math.PI), n3.closePath();
                else {
                  if (s2 = u2 ? l.add(u2.position, r2.pointB) : r2.pointB, n3.beginPath(), n3.moveTo(a2.x, a2.y), "spring" === r2.render.type)
                    for (var d2, p2 = l.sub(s2, a2), f2 = l.perp(l.normalise(p2)), v2 = Math.ceil(o.clamp(r2.length / 5, 12, 20)), m = 1; m < v2; m += 1)
                      d2 = m % 2 == 0 ? 1 : -1, n3.lineTo(a2.x + p2.x * (m / v2) + f2.x * d2 * 4, a2.y + p2.y * (m / v2) + f2.y * d2 * 4);
                  n3.lineTo(s2.x, s2.y);
                }
                r2.render.lineWidth && (n3.lineWidth = r2.render.lineWidth, n3.strokeStyle = r2.render.strokeStyle, n3.stroke()), r2.render.anchors && (n3.fillStyle = r2.render.strokeStyle, n3.beginPath(), n3.arc(a2.x, a2.y, 3, 0, 2 * Math.PI), n3.arc(s2.x, s2.y, 3, 0, 2 * Math.PI), n3.closePath(), n3.fill());
              }
            }
          }, i.bodies = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2 = n3, l2 = (e3.engine, e3.options), c2 = l2.showInternalEdges || !l2.wireframes;
            for (r2 = 0; r2 < t3.length; r2++)
              if ((i2 = t3[r2]).render.visible) {
                for (a2 = i2.parts.length > 1 ? 1 : 0; a2 < i2.parts.length; a2++)
                  if ((o2 = i2.parts[a2]).render.visible) {
                    if (l2.showSleeping && i2.isSleeping ? s2.globalAlpha = 0.5 * o2.render.opacity : 1 !== o2.render.opacity && (s2.globalAlpha = o2.render.opacity), o2.render.sprite && o2.render.sprite.texture && !l2.wireframes) {
                      var u2 = o2.render.sprite, d2 = f(e3, u2.texture);
                      s2.translate(o2.position.x, o2.position.y), s2.rotate(o2.angle), s2.drawImage(d2, d2.width * -u2.xOffset * u2.xScale, d2.height * -u2.yOffset * u2.yScale, d2.width * u2.xScale, d2.height * u2.yScale), s2.rotate(-o2.angle), s2.translate(-o2.position.x, -o2.position.y);
                    } else {
                      if (o2.circleRadius)
                        s2.beginPath(), s2.arc(o2.position.x, o2.position.y, o2.circleRadius, 0, 2 * Math.PI);
                      else {
                        s2.beginPath(), s2.moveTo(o2.vertices[0].x, o2.vertices[0].y);
                        for (var p2 = 1; p2 < o2.vertices.length; p2++)
                          !o2.vertices[p2 - 1].isInternal || c2 ? s2.lineTo(o2.vertices[p2].x, o2.vertices[p2].y) : s2.moveTo(o2.vertices[p2].x, o2.vertices[p2].y), o2.vertices[p2].isInternal && !c2 && s2.moveTo(o2.vertices[(p2 + 1) % o2.vertices.length].x, o2.vertices[(p2 + 1) % o2.vertices.length].y);
                        s2.lineTo(o2.vertices[0].x, o2.vertices[0].y), s2.closePath();
                      }
                      l2.wireframes ? (s2.lineWidth = 1, s2.strokeStyle = "#bbb", s2.stroke()) : (s2.fillStyle = o2.render.fillStyle, o2.render.lineWidth && (s2.lineWidth = o2.render.lineWidth, s2.strokeStyle = o2.render.strokeStyle, s2.stroke()), s2.fill());
                    }
                    if (s2.globalAlpha = 1, o2.render.text) {
                      var v2 = 30, m = o2.render.text.family || "Arial", y = o2.render.text.color || "#FFFFFF";
                      o2.render.text.size ? v2 = o2.render.text.size : o2.circleRadius && (v2 = o2.circleRadius / 2);
                      var g = "";
                      "string" == typeof o2.render.text ? g = o2.render.text : o2.render.text.content && (g = o2.render.text.content), s2.textBaseline = "middle", s2.textAlign = "center", s2.fillStyle = y, s2.font = v2 + "px " + m, s2.fillText(g, o2.position.x, o2.position.y);
                    }
                  }
              }
          }, i.bodyWireframes = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2, l2 = n3, c2 = e3.options.showInternalEdges;
            for (l2.beginPath(), r2 = 0; r2 < t3.length; r2++)
              if ((i2 = t3[r2]).render.visible)
                for (s2 = i2.parts.length > 1 ? 1 : 0; s2 < i2.parts.length; s2++) {
                  for (o2 = i2.parts[s2], l2.moveTo(o2.vertices[0].x, o2.vertices[0].y), a2 = 1; a2 < o2.vertices.length; a2++)
                    !o2.vertices[a2 - 1].isInternal || c2 ? l2.lineTo(o2.vertices[a2].x, o2.vertices[a2].y) : l2.moveTo(o2.vertices[a2].x, o2.vertices[a2].y), o2.vertices[a2].isInternal && !c2 && l2.moveTo(o2.vertices[(a2 + 1) % o2.vertices.length].x, o2.vertices[(a2 + 1) % o2.vertices.length].y);
                  l2.lineTo(o2.vertices[0].x, o2.vertices[0].y);
                }
            l2.lineWidth = 1, l2.strokeStyle = "#bbb", l2.stroke();
          }, i.bodyConvexHulls = function(e3, t3, n3) {
            var i2, o2, r2, a2 = n3;
            for (a2.beginPath(), o2 = 0; o2 < t3.length; o2++)
              if ((i2 = t3[o2]).render.visible && 1 !== i2.parts.length) {
                for (a2.moveTo(i2.vertices[0].x, i2.vertices[0].y), r2 = 1; r2 < i2.vertices.length; r2++)
                  a2.lineTo(i2.vertices[r2].x, i2.vertices[r2].y);
                a2.lineTo(i2.vertices[0].x, i2.vertices[0].y);
              }
            a2.lineWidth = 1, a2.strokeStyle = "rgba(255,255,255,0.2)", a2.stroke();
          }, i.vertexNumbers = function(e3, t3, n3) {
            var i2, o2, r2, a2 = n3;
            for (i2 = 0; i2 < t3.length; i2++) {
              var s2 = t3[i2].parts;
              for (r2 = s2.length > 1 ? 1 : 0; r2 < s2.length; r2++) {
                var l2 = s2[r2];
                for (o2 = 0; o2 < l2.vertices.length; o2++)
                  a2.fillStyle = "rgba(255,255,255,0.2)", a2.fillText(i2 + "_" + o2, l2.position.x + 0.8 * (l2.vertices[o2].x - l2.position.x), l2.position.y + 0.8 * (l2.vertices[o2].y - l2.position.y));
              }
            }
          }, i.mousePosition = function(e3, t3, n3) {
            var i2 = n3;
            i2.fillStyle = "rgba(255,255,255,0.8)", i2.fillText(t3.position.x + "  " + t3.position.y, t3.position.x + 5, t3.position.y - 5);
          }, i.bodyBounds = function(e3, t3, n3) {
            var i2 = n3, o2 = (e3.engine, e3.options);
            i2.beginPath();
            for (var r2 = 0; r2 < t3.length; r2++) {
              if (t3[r2].render.visible)
                for (var a2 = t3[r2].parts, s2 = a2.length > 1 ? 1 : 0; s2 < a2.length; s2++) {
                  var l2 = a2[s2];
                  i2.rect(l2.bounds.min.x, l2.bounds.min.y, l2.bounds.max.x - l2.bounds.min.x, l2.bounds.max.y - l2.bounds.min.y);
                }
            }
            o2.wireframes ? i2.strokeStyle = "rgba(255,255,255,0.08)" : i2.strokeStyle = "rgba(0,0,0,0.1)", i2.lineWidth = 1, i2.stroke();
          }, i.bodyAxes = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2 = n3, l2 = (e3.engine, e3.options);
            for (s2.beginPath(), o2 = 0; o2 < t3.length; o2++) {
              var c2 = t3[o2], u2 = c2.parts;
              if (c2.render.visible)
                if (l2.showAxes)
                  for (r2 = u2.length > 1 ? 1 : 0; r2 < u2.length; r2++)
                    for (i2 = u2[r2], a2 = 0; a2 < i2.axes.length; a2++) {
                      var d2 = i2.axes[a2];
                      s2.moveTo(i2.position.x, i2.position.y), s2.lineTo(i2.position.x + 20 * d2.x, i2.position.y + 20 * d2.y);
                    }
                else
                  for (r2 = u2.length > 1 ? 1 : 0; r2 < u2.length; r2++)
                    for (i2 = u2[r2], a2 = 0; a2 < i2.axes.length; a2++)
                      s2.moveTo(i2.position.x, i2.position.y), s2.lineTo((i2.vertices[0].x + i2.vertices[i2.vertices.length - 1].x) / 2, (i2.vertices[0].y + i2.vertices[i2.vertices.length - 1].y) / 2);
            }
            l2.wireframes ? (s2.strokeStyle = "indianred", s2.lineWidth = 1) : (s2.strokeStyle = "rgba(255, 255, 255, 0.4)", s2.globalCompositeOperation = "overlay", s2.lineWidth = 2), s2.stroke(), s2.globalCompositeOperation = "source-over";
          }, i.bodyPositions = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2 = n3, l2 = (e3.engine, e3.options);
            for (s2.beginPath(), r2 = 0; r2 < t3.length; r2++)
              if ((i2 = t3[r2]).render.visible)
                for (a2 = 0; a2 < i2.parts.length; a2++)
                  o2 = i2.parts[a2], s2.arc(o2.position.x, o2.position.y, 3, 0, 2 * Math.PI, false), s2.closePath();
            for (l2.wireframes ? s2.fillStyle = "indianred" : s2.fillStyle = "rgba(0,0,0,0.5)", s2.fill(), s2.beginPath(), r2 = 0; r2 < t3.length; r2++)
              (i2 = t3[r2]).render.visible && (s2.arc(i2.positionPrev.x, i2.positionPrev.y, 2, 0, 2 * Math.PI, false), s2.closePath());
            s2.fillStyle = "rgba(255,165,0,0.8)", s2.fill();
          }, i.bodyVelocity = function(e3, t3, n3) {
            var i2 = n3;
            i2.beginPath();
            for (var o2 = 0; o2 < t3.length; o2++) {
              var r2 = t3[o2];
              r2.render.visible && (i2.moveTo(r2.position.x, r2.position.y), i2.lineTo(r2.position.x + 2 * (r2.position.x - r2.positionPrev.x), r2.position.y + 2 * (r2.position.y - r2.positionPrev.y)));
            }
            i2.lineWidth = 3, i2.strokeStyle = "cornflowerblue", i2.stroke();
          }, i.bodyIds = function(e3, t3, n3) {
            var i2, o2, r2 = n3;
            for (i2 = 0; i2 < t3.length; i2++)
              if (t3[i2].render.visible) {
                var a2 = t3[i2].parts;
                for (o2 = a2.length > 1 ? 1 : 0; o2 < a2.length; o2++) {
                  var s2 = a2[o2];
                  r2.font = "12px Arial", r2.fillStyle = "rgba(255,255,255,0.5)", r2.fillText(s2.id, s2.position.x + 10, s2.position.y - 10);
                }
              }
          }, i.collisions = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2 = n3, l2 = e3.options;
            for (s2.beginPath(), r2 = 0; r2 < t3.length; r2++)
              if ((i2 = t3[r2]).isActive)
                for (o2 = i2.collision, a2 = 0; a2 < i2.activeContacts.length; a2++) {
                  var c2 = i2.activeContacts[a2].vertex;
                  s2.rect(c2.x - 1.5, c2.y - 1.5, 3.5, 3.5);
                }
            for (l2.wireframes ? s2.fillStyle = "rgba(255,255,255,0.7)" : s2.fillStyle = "orange", s2.fill(), s2.beginPath(), r2 = 0; r2 < t3.length; r2++)
              if ((i2 = t3[r2]).isActive && (o2 = i2.collision, i2.activeContacts.length > 0)) {
                var u2 = i2.activeContacts[0].vertex.x, d2 = i2.activeContacts[0].vertex.y;
                2 === i2.activeContacts.length && (u2 = (i2.activeContacts[0].vertex.x + i2.activeContacts[1].vertex.x) / 2, d2 = (i2.activeContacts[0].vertex.y + i2.activeContacts[1].vertex.y) / 2), o2.bodyB === o2.supports[0].body || true === o2.bodyA.isStatic ? s2.moveTo(u2 - 8 * o2.normal.x, d2 - 8 * o2.normal.y) : s2.moveTo(u2 + 8 * o2.normal.x, d2 + 8 * o2.normal.y), s2.lineTo(u2, d2);
              }
            l2.wireframes ? s2.strokeStyle = "rgba(255,165,0,0.7)" : s2.strokeStyle = "orange", s2.lineWidth = 1, s2.stroke();
          }, i.separations = function(e3, t3, n3) {
            var i2, o2, r2, a2, s2, l2 = n3, c2 = e3.options;
            for (l2.beginPath(), s2 = 0; s2 < t3.length; s2++)
              if ((i2 = t3[s2]).isActive) {
                r2 = (o2 = i2.collision).bodyA;
                var u2 = 1;
                (a2 = o2.bodyB).isStatic || r2.isStatic || (u2 = 0.5), a2.isStatic && (u2 = 0), l2.moveTo(a2.position.x, a2.position.y), l2.lineTo(a2.position.x - o2.penetration.x * u2, a2.position.y - o2.penetration.y * u2), u2 = 1, a2.isStatic || r2.isStatic || (u2 = 0.5), r2.isStatic && (u2 = 0), l2.moveTo(r2.position.x, r2.position.y), l2.lineTo(r2.position.x + o2.penetration.x * u2, r2.position.y + o2.penetration.y * u2);
              }
            c2.wireframes ? l2.strokeStyle = "rgba(255,165,0,0.5)" : l2.strokeStyle = "orange", l2.stroke();
          }, i.grid = function(e3, t3, n3) {
            var i2 = n3;
            e3.options.wireframes ? i2.strokeStyle = "rgba(255,180,0,0.1)" : i2.strokeStyle = "rgba(255,180,0,0.5)", i2.beginPath();
            for (var r2 = o.keys(t3.buckets), a2 = 0; a2 < r2.length; a2++) {
              var s2 = r2[a2];
              if (!(t3.buckets[s2].length < 2)) {
                var l2 = s2.split(/C|R/);
                i2.rect(0.5 + parseInt(l2[1], 10) * t3.bucketWidth, 0.5 + parseInt(l2[2], 10) * t3.bucketHeight, t3.bucketWidth, t3.bucketHeight);
              }
            }
            i2.lineWidth = 1, i2.stroke();
          }, i.inspector = function(e3, t3) {
            e3.engine;
            var n3, i2 = e3.selected, o2 = e3.render, r2 = o2.options;
            if (r2.hasBounds) {
              var a2 = o2.bounds.max.x - o2.bounds.min.x, s2 = o2.bounds.max.y - o2.bounds.min.y, l2 = a2 / o2.options.width, c2 = s2 / o2.options.height;
              t3.scale(1 / l2, 1 / c2), t3.translate(-o2.bounds.min.x, -o2.bounds.min.y);
            }
            for (var u2 = 0; u2 < i2.length; u2++) {
              var d2 = i2[u2].data;
              switch (t3.translate(0.5, 0.5), t3.lineWidth = 1, t3.strokeStyle = "rgba(255,165,0,0.9)", t3.setLineDash([1, 2]), d2.type) {
                case "body":
                  n3 = d2.bounds, t3.beginPath(), t3.rect(Math.floor(n3.min.x - 3), Math.floor(n3.min.y - 3), Math.floor(n3.max.x - n3.min.x + 6), Math.floor(n3.max.y - n3.min.y + 6)), t3.closePath(), t3.stroke();
                  break;
                case "constraint":
                  var p2 = d2.pointA;
                  d2.bodyA && (p2 = d2.pointB), t3.beginPath(), t3.arc(p2.x, p2.y, 10, 0, 2 * Math.PI), t3.closePath(), t3.stroke();
              }
              t3.setLineDash([]), t3.translate(-0.5, -0.5);
            }
            null !== e3.selectStart && (t3.translate(0.5, 0.5), t3.lineWidth = 1, t3.strokeStyle = "rgba(255,165,0,0.6)", t3.fillStyle = "rgba(255,165,0,0.1)", n3 = e3.selectBounds, t3.beginPath(), t3.rect(Math.floor(n3.min.x), Math.floor(n3.min.y), Math.floor(n3.max.x - n3.min.x), Math.floor(n3.max.y - n3.min.y)), t3.closePath(), t3.stroke(), t3.fill(), t3.translate(-0.5, -0.5)), r2.hasBounds && t3.setTransform(1, 0, 0, 1, 0, 0);
          };
          var n2 = function(e3, t3) {
            var n3 = e3.engine, o2 = e3.timing, r2 = o2.historySize, a2 = n3.timing.timestamp;
            o2.delta = t3 - o2.lastTime || i._goodDelta, o2.lastTime = t3, o2.timestampElapsed = a2 - o2.lastTimestamp || 0, o2.lastTimestamp = a2, o2.deltaHistory.unshift(o2.delta), o2.deltaHistory.length = Math.min(o2.deltaHistory.length, r2), o2.engineDeltaHistory.unshift(n3.timing.lastDelta), o2.engineDeltaHistory.length = Math.min(o2.engineDeltaHistory.length, r2), o2.timestampElapsedHistory.unshift(o2.timestampElapsed), o2.timestampElapsedHistory.length = Math.min(o2.timestampElapsedHistory.length, r2), o2.engineElapsedHistory.unshift(n3.timing.lastElapsed), o2.engineElapsedHistory.length = Math.min(o2.engineElapsedHistory.length, r2), o2.elapsedHistory.unshift(o2.lastElapsed), o2.elapsedHistory.length = Math.min(o2.elapsedHistory.length, r2);
          }, u = function(e3) {
            for (var t3 = 0, n3 = 0; n3 < e3.length; n3 += 1)
              t3 += e3[n3];
            return t3 / e3.length || 0;
          }, d = function(e3, t3) {
            var n3 = document.createElement("canvas");
            return n3.width = e3, n3.height = t3, n3.oncontextmenu = function() {
              return false;
            }, n3.onselectstart = function() {
              return false;
            }, n3;
          }, p = function(e3) {
            var t3 = e3.getContext("2d");
            return (window.devicePixelRatio || 1) / (t3.webkitBackingStorePixelRatio || t3.mozBackingStorePixelRatio || t3.msBackingStorePixelRatio || t3.oBackingStorePixelRatio || t3.backingStorePixelRatio || 1);
          }, f = function(e3, t3) {
            var n3 = e3.textures[t3];
            return n3 || ((n3 = e3.textures[t3] = new Image()).src = t3, n3);
          }, v = function(e3, t3) {
            var n3 = t3;
            /(jpg|gif|png)$/.test(t3) && (n3 = "url(" + t3 + ")"), e3.canvas.style.background = n3, e3.canvas.style.backgroundSize = "contain", e3.currentBackground = t3;
          };
        }();
      }, function(e, t) {
        var n = {};
        e.exports = n, n.create = function(e2) {
          return { id: n.id(e2), vertex: e2, normalImpulse: 0, tangentImpulse: 0 };
        }, n.id = function(e2) {
          return e2.body.id + "_" + e2.index;
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(7), r = n(19), a = n(13), s = n(20), l = n(21), c = n(4), u = n(5), d = n(8), p = n(0), f = n(6);
        i.create = function(e2) {
          e2 = e2 || {};
          var t2 = p.extend({ positionIterations: 6, velocityIterations: 4, constraintIterations: 2, enableSleeping: false, events: [], plugin: {}, grid: null, gravity: { x: 0, y: 1, scale: 1e-3 }, timing: { timestamp: 0, timeScale: 1, lastDelta: 0, lastElapsed: 0 } }, e2);
          return t2.world = e2.world || u.create({ label: "World" }), t2.grid = l.create(e2.grid || e2.broadphase), t2.pairs = s.create(), t2.world.gravity = t2.gravity, t2.broadphase = t2.grid, t2.metrics = {}, t2;
        }, i.update = function(e2, t2, n2) {
          var f2 = p.now();
          t2 = t2 || 1e3 / 60, n2 = n2 || 1;
          var v, m, y = e2.world, g = e2.timing, x = e2.grid;
          g.timestamp += t2 * g.timeScale, g.lastDelta = t2 * g.timeScale;
          var h = { timestamp: g.timestamp };
          c.trigger(e2, "beforeUpdate", h);
          var b = u.allBodies(y), S = u.allConstraints(y);
          for (e2.enableSleeping && o.update(b, g.timeScale), i._bodiesApplyGravity(b, e2.gravity), i._bodiesUpdate(b, t2, g.timeScale, n2, y.bounds), d.preSolveAll(b), m = 0; m < e2.constraintIterations; m++)
            d.solveAll(S, g.timeScale);
          d.postSolveAll(b), y.isModified && l.clear(x), l.update(x, b, e2, y.isModified), v = x.pairsList, y.isModified && u.setModified(y, false, false, true);
          var w = a.collisions(v, e2), A = e2.pairs, P = g.timestamp;
          for (s.update(A, w, P), s.removeOld(A, P), e2.enableSleeping && o.afterCollisions(A.list, g.timeScale), A.collisionStart.length > 0 && c.trigger(e2, "collisionStart", { pairs: A.collisionStart }), r.preSolvePosition(A.list), m = 0; m < e2.positionIterations; m++)
            r.solvePosition(A.list, g.timeScale);
          for (r.postSolvePosition(b), d.preSolveAll(b), m = 0; m < e2.constraintIterations; m++)
            d.solveAll(S, g.timeScale);
          for (d.postSolveAll(b), r.preSolveVelocity(A.list), m = 0; m < e2.velocityIterations; m++)
            r.solveVelocity(A.list, g.timeScale);
          return A.collisionActive.length > 0 && c.trigger(e2, "collisionActive", { pairs: A.collisionActive }), A.collisionEnd.length > 0 && c.trigger(e2, "collisionEnd", { pairs: A.collisionEnd }), i._bodiesClearForces(b), c.trigger(e2, "afterUpdate", h), e2.timing.lastElapsed = p.now() - f2, e2;
        }, i.merge = function(e2, t2) {
          if (p.extend(e2, t2), t2.world) {
            e2.world = t2.world, i.clear(e2);
            for (var n2 = u.allBodies(e2.world), r2 = 0; r2 < n2.length; r2++) {
              var a2 = n2[r2];
              o.set(a2, false), a2.id = p.nextId();
            }
          }
        }, i.clear = function(e2) {
          var t2 = e2.world, n2 = u.allBodies(t2);
          s.clear(e2.pairs), l.clear(e2.grid), l.update(e2.grid, n2, e2, true);
        }, i._bodiesClearForces = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var n2 = e2[t2];
            n2.force.x = 0, n2.force.y = 0, n2.torque = 0;
          }
        }, i._bodiesApplyGravity = function(e2, t2) {
          var n2 = void 0 !== t2.scale ? t2.scale : 1e-3;
          if ((0 !== t2.x || 0 !== t2.y) && 0 !== n2)
            for (var i2 = 0; i2 < e2.length; i2++) {
              var o2 = e2[i2];
              o2.isStatic || o2.isSleeping || (o2.force.y += o2.mass * t2.y * n2, o2.force.x += o2.mass * t2.x * n2);
            }
        }, i._bodiesUpdate = function(e2, t2, n2, i2, o2) {
          for (var r2 = 0; r2 < e2.length; r2++) {
            var a2 = e2[r2];
            a2.isStatic || a2.isSleeping || f.update(a2, t2, n2, i2);
          }
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(2), a = n(0), s = n(1);
        i._restingThresh = 4, i._restingThreshTangent = 6, i._positionDampen = 0.9, i._positionWarming = 0.8, i._frictionNormalMultiplier = 5, i.preSolvePosition = function(e2) {
          var t2, n2, i2;
          for (t2 = 0; t2 < e2.length; t2++)
            (n2 = e2[t2]).isActive && (i2 = n2.activeContacts.length, n2.collision.parentA.totalContacts += i2, n2.collision.parentB.totalContacts += i2);
        }, i.solvePosition = function(e2, t2) {
          var n2, o2, a2, s2, l, c, u, d, p, f = r._temp[0], v = r._temp[1], m = r._temp[2], y = r._temp[3];
          for (n2 = 0; n2 < e2.length; n2++)
            (o2 = e2[n2]).isActive && !o2.isSensor && (s2 = (a2 = o2.collision).parentA, l = a2.parentB, c = a2.normal, u = r.sub(r.add(l.positionImpulse, l.position, f), r.add(s2.positionImpulse, r.sub(l.position, a2.penetration, v), m), y), o2.separation = r.dot(c, u));
          for (n2 = 0; n2 < e2.length; n2++)
            (o2 = e2[n2]).isActive && !o2.isSensor && (s2 = (a2 = o2.collision).parentA, l = a2.parentB, c = a2.normal, p = (o2.separation - o2.slop) * t2, (s2.isStatic || l.isStatic) && (p *= 2), s2.isStatic || s2.isSleeping || (d = i._positionDampen / s2.totalContacts, s2.positionImpulse.x += c.x * p * d, s2.positionImpulse.y += c.y * p * d), l.isStatic || l.isSleeping || (d = i._positionDampen / l.totalContacts, l.positionImpulse.x -= c.x * p * d, l.positionImpulse.y -= c.y * p * d));
        }, i.postSolvePosition = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var n2 = e2[t2];
            if (n2.totalContacts = 0, 0 !== n2.positionImpulse.x || 0 !== n2.positionImpulse.y) {
              for (var a2 = 0; a2 < n2.parts.length; a2++) {
                var l = n2.parts[a2];
                o.translate(l.vertices, n2.positionImpulse), s.update(l.bounds, l.vertices, n2.velocity), l.position.x += n2.positionImpulse.x, l.position.y += n2.positionImpulse.y;
              }
              n2.positionPrev.x += n2.positionImpulse.x, n2.positionPrev.y += n2.positionImpulse.y, r.dot(n2.positionImpulse, n2.velocity) < 0 ? (n2.positionImpulse.x = 0, n2.positionImpulse.y = 0) : (n2.positionImpulse.x *= i._positionWarming, n2.positionImpulse.y *= i._positionWarming);
            }
          }
        }, i.preSolveVelocity = function(e2) {
          var t2, n2, i2, o2, a2, s2, l, c, u, d, p, f, v, m, y = r._temp[0], g = r._temp[1];
          for (t2 = 0; t2 < e2.length; t2++)
            if ((i2 = e2[t2]).isActive && !i2.isSensor)
              for (o2 = i2.activeContacts, s2 = (a2 = i2.collision).parentA, l = a2.parentB, c = a2.normal, u = a2.tangent, n2 = 0; n2 < o2.length; n2++)
                p = (d = o2[n2]).vertex, f = d.normalImpulse, v = d.tangentImpulse, 0 === f && 0 === v || (y.x = c.x * f + u.x * v, y.y = c.y * f + u.y * v, s2.isStatic || s2.isSleeping || (m = r.sub(p, s2.position, g), s2.positionPrev.x += y.x * s2.inverseMass, s2.positionPrev.y += y.y * s2.inverseMass, s2.anglePrev += r.cross(m, y) * s2.inverseInertia), l.isStatic || l.isSleeping || (m = r.sub(p, l.position, g), l.positionPrev.x -= y.x * l.inverseMass, l.positionPrev.y -= y.y * l.inverseMass, l.anglePrev -= r.cross(m, y) * l.inverseInertia));
        }, i.solveVelocity = function(e2, t2) {
          for (var n2 = t2 * t2, o2 = r._temp[0], s2 = r._temp[1], l = r._temp[2], c = r._temp[3], u = r._temp[4], d = r._temp[5], p = 0; p < e2.length; p++) {
            var f = e2[p];
            if (f.isActive && !f.isSensor) {
              var v = f.collision, m = v.parentA, y = v.parentB, g = v.normal, x = v.tangent, h = f.activeContacts, b = 1 / h.length;
              m.velocity.x = m.position.x - m.positionPrev.x, m.velocity.y = m.position.y - m.positionPrev.y, y.velocity.x = y.position.x - y.positionPrev.x, y.velocity.y = y.position.y - y.positionPrev.y, m.angularVelocity = m.angle - m.anglePrev, y.angularVelocity = y.angle - y.anglePrev;
              for (var S = 0; S < h.length; S++) {
                var w = h[S], A = w.vertex, P = r.sub(A, m.position, s2), M = r.sub(A, y.position, l), C = r.add(m.velocity, r.mult(r.perp(P), m.angularVelocity), c), B = r.add(y.velocity, r.mult(r.perp(M), y.angularVelocity), u), _ = r.sub(C, B, d), k = r.dot(g, _), I = r.dot(x, _), T = Math.abs(I), R = a.sign(I), E = (1 + f.restitution) * k, L = a.clamp(f.separation + k, 0, 1) * i._frictionNormalMultiplier, V = I, F = 1 / 0;
                T > f.friction * f.frictionStatic * L * n2 && (F = T, V = a.clamp(f.friction * R * n2, -F, F));
                var O = r.cross(P, g), D = r.cross(M, g), H = b / (m.inverseMass + y.inverseMass + m.inverseInertia * O * O + y.inverseInertia * D * D);
                if (E *= H, V *= H, k < 0 && k * k > i._restingThresh * n2)
                  w.normalImpulse = 0;
                else {
                  var j = w.normalImpulse;
                  w.normalImpulse = Math.min(w.normalImpulse + E, 0), E = w.normalImpulse - j;
                }
                if (I * I > i._restingThreshTangent * n2)
                  w.tangentImpulse = 0;
                else {
                  var W = w.tangentImpulse;
                  w.tangentImpulse = a.clamp(w.tangentImpulse + V, -F, F), V = w.tangentImpulse - W;
                }
                o2.x = g.x * E + x.x * V, o2.y = g.y * E + x.y * V, m.isStatic || m.isSleeping || (m.positionPrev.x += o2.x * m.inverseMass, m.positionPrev.y += o2.y * m.inverseMass, m.anglePrev += r.cross(P, o2) * m.inverseInertia), y.isStatic || y.isSleeping || (y.positionPrev.x -= o2.x * y.inverseMass, y.positionPrev.y -= o2.y * y.inverseMass, y.anglePrev -= r.cross(M, o2) * y.inverseInertia);
              }
            }
          }
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(9), r = n(0);
        i._pairMaxIdleLife = 1e3, i.create = function(e2) {
          return r.extend({ table: {}, list: [], collisionStart: [], collisionActive: [], collisionEnd: [] }, e2);
        }, i.update = function(e2, t2, n2) {
          var i2, r2, a, s, l = e2.list, c = e2.table, u = e2.collisionStart, d = e2.collisionEnd, p = e2.collisionActive;
          for (u.length = 0, d.length = 0, p.length = 0, s = 0; s < l.length; s++)
            l[s].confirmedActive = false;
          for (s = 0; s < t2.length; s++)
            (i2 = t2[s]).collided && ((a = c[r2 = o.id(i2.bodyA, i2.bodyB)]) ? (a.isActive ? p.push(a) : u.push(a), o.update(a, i2, n2), a.confirmedActive = true) : (a = o.create(i2, n2), c[r2] = a, u.push(a), l.push(a)));
          for (s = 0; s < l.length; s++)
            (a = l[s]).isActive && !a.confirmedActive && (o.setActive(a, false, n2), d.push(a));
        }, i.removeOld = function(e2, t2) {
          var n2, o2, r2, a, s = e2.list, l = e2.table, c = [];
          for (a = 0; a < s.length; a++)
            (o2 = (n2 = s[a]).collision).bodyA.isSleeping || o2.bodyB.isSleeping ? n2.timeUpdated = t2 : t2 - n2.timeUpdated > i._pairMaxIdleLife && c.push(a);
          for (a = 0; a < c.length; a++)
            delete l[(n2 = s[r2 = c[a] - a]).id], s.splice(r2, 1);
        }, i.clear = function(e2) {
          return e2.table = {}, e2.list.length = 0, e2.collisionStart.length = 0, e2.collisionActive.length = 0, e2.collisionEnd.length = 0, e2;
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(9), r = n(0);
        i.create = function(e2) {
          return r.extend({ buckets: {}, pairs: {}, pairsList: [], bucketWidth: 48, bucketHeight: 48 }, e2);
        }, i.update = function(e2, t2, n2, o2) {
          var r2, a, s, l, c, u = n2.world, d = e2.buckets, p = false;
          for (r2 = 0; r2 < t2.length; r2++) {
            var f = t2[r2];
            if ((!f.isSleeping || o2) && (!u.bounds || !(f.bounds.max.x < u.bounds.min.x || f.bounds.min.x > u.bounds.max.x || f.bounds.max.y < u.bounds.min.y || f.bounds.min.y > u.bounds.max.y))) {
              var v = i._getRegion(e2, f);
              if (!f.region || v.id !== f.region.id || o2) {
                f.region && !o2 || (f.region = v);
                var m = i._regionUnion(v, f.region);
                for (a = m.startCol; a <= m.endCol; a++)
                  for (s = m.startRow; s <= m.endRow; s++) {
                    l = d[c = i._getBucketId(a, s)];
                    var y = a >= v.startCol && a <= v.endCol && s >= v.startRow && s <= v.endRow, g = a >= f.region.startCol && a <= f.region.endCol && s >= f.region.startRow && s <= f.region.endRow;
                    !y && g && g && l && i._bucketRemoveBody(e2, l, f), (f.region === v || y && !g || o2) && (l || (l = i._createBucket(d, c)), i._bucketAddBody(e2, l, f));
                  }
                f.region = v, p = true;
              }
            }
          }
          p && (e2.pairsList = i._createActivePairsList(e2));
        }, i.clear = function(e2) {
          e2.buckets = {}, e2.pairs = {}, e2.pairsList = [];
        }, i._regionUnion = function(e2, t2) {
          var n2 = Math.min(e2.startCol, t2.startCol), o2 = Math.max(e2.endCol, t2.endCol), r2 = Math.min(e2.startRow, t2.startRow), a = Math.max(e2.endRow, t2.endRow);
          return i._createRegion(n2, o2, r2, a);
        }, i._getRegion = function(e2, t2) {
          var n2 = t2.bounds, o2 = Math.floor(n2.min.x / e2.bucketWidth), r2 = Math.floor(n2.max.x / e2.bucketWidth), a = Math.floor(n2.min.y / e2.bucketHeight), s = Math.floor(n2.max.y / e2.bucketHeight);
          return i._createRegion(o2, r2, a, s);
        }, i._createRegion = function(e2, t2, n2, i2) {
          return { id: e2 + "," + t2 + "," + n2 + "," + i2, startCol: e2, endCol: t2, startRow: n2, endRow: i2 };
        }, i._getBucketId = function(e2, t2) {
          return "C" + e2 + "R" + t2;
        }, i._createBucket = function(e2, t2) {
          return e2[t2] = [];
        }, i._bucketAddBody = function(e2, t2, n2) {
          for (var i2 = 0; i2 < t2.length; i2++) {
            var r2 = t2[i2];
            if (!(n2.id === r2.id || n2.isStatic && r2.isStatic)) {
              var a = o.id(n2, r2), s = e2.pairs[a];
              s ? s[2] += 1 : e2.pairs[a] = [n2, r2, 1];
            }
          }
          t2.push(n2);
        }, i._bucketRemoveBody = function(e2, t2, n2) {
          t2.splice(r.indexOf(t2, n2), 1);
          for (var i2 = 0; i2 < t2.length; i2++) {
            var a = t2[i2], s = o.id(n2, a), l = e2.pairs[s];
            l && (l[2] -= 1);
          }
        }, i._createActivePairsList = function(e2) {
          var t2, n2, i2 = [];
          t2 = r.keys(e2.pairs);
          for (var o2 = 0; o2 < t2.length; o2++)
            (n2 = e2.pairs[t2[o2]])[2] > 0 ? i2.push(n2) : delete e2.pairs[t2[o2]];
          return i2;
        };
      }, function(e, t, n) {
        var i = e.exports = n(23);
        i.Axes = n(10), i.Bodies = n(11), i.Body = n(6), i.Bounds = n(1), i.Common = n(0), i.Composite = n(5), i.Composites = n(24), i.Constraint = n(8), i.Contact = n(17), i.Detector = n(13), i.Engine = n(18), i.Events = n(4), i.Grid = n(21), i.Mouse = n(12), i.MouseConstraint = n(25), i.Pair = n(9), i.Pairs = n(20), i.Plugin = n(15), i.Query = n(26), i.Render = n(16), i.Resolver = n(19), i.Runner = n(27), i.SAT = n(14), i.Sleeping = n(7), i.Svg = n(28), i.Vector = n(2), i.Vertices = n(3), i.World = n(29), i.Engine.run = i.Runner.run, i.Common.deprecated(i.Engine, "run", "Engine.run \u27A4 use Matter.Runner.run(engine) instead");
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(15), r = n(0);
        i.name = "matter-js", i.version = "0.17.1", i.uses = [], i.used = [], i.use = function() {
          o.use(i, Array.prototype.slice.call(arguments));
        }, i.before = function(e2, t2) {
          return e2 = e2.replace(/^Matter./, ""), r.chainPathBefore(i, e2, t2);
        }, i.after = function(e2, t2) {
          return e2 = e2.replace(/^Matter./, ""), r.chainPathAfter(i, e2, t2);
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(5), r = n(8), a = n(0), s = n(6), l = n(11), c = a.deprecated;
        i.stack = function(e2, t2, n2, i2, r2, a2, l2) {
          for (var c2, u = o.create({ label: "Stack" }), d = e2, p = t2, f = 0, v = 0; v < i2; v++) {
            for (var m = 0, y = 0; y < n2; y++) {
              var g = l2(d, p, y, v, c2, f);
              if (g) {
                var x = g.bounds.max.y - g.bounds.min.y, h = g.bounds.max.x - g.bounds.min.x;
                x > m && (m = x), s.translate(g, { x: 0.5 * h, y: 0.5 * x }), d = g.bounds.max.x + r2, o.addBody(u, g), c2 = g, f += 1;
              } else
                d += r2;
            }
            p += m + a2, d = e2;
          }
          return u;
        }, i.chain = function(e2, t2, n2, i2, s2, l2) {
          for (var c2 = e2.bodies, u = 1; u < c2.length; u++) {
            var d = c2[u - 1], p = c2[u], f = d.bounds.max.y - d.bounds.min.y, v = d.bounds.max.x - d.bounds.min.x, m = p.bounds.max.y - p.bounds.min.y, y = { bodyA: d, pointA: { x: v * t2, y: f * n2 }, bodyB: p, pointB: { x: (p.bounds.max.x - p.bounds.min.x) * i2, y: m * s2 } }, g = a.extend(y, l2);
            o.addConstraint(e2, r.create(g));
          }
          return e2.label += " Chain", e2;
        }, i.mesh = function(e2, t2, n2, i2, s2) {
          var l2, c2, u, d, p, f = e2.bodies;
          for (l2 = 0; l2 < n2; l2++) {
            for (c2 = 1; c2 < t2; c2++)
              u = f[c2 - 1 + l2 * t2], d = f[c2 + l2 * t2], o.addConstraint(e2, r.create(a.extend({ bodyA: u, bodyB: d }, s2)));
            if (l2 > 0)
              for (c2 = 0; c2 < t2; c2++)
                u = f[c2 + (l2 - 1) * t2], d = f[c2 + l2 * t2], o.addConstraint(e2, r.create(a.extend({ bodyA: u, bodyB: d }, s2))), i2 && c2 > 0 && (p = f[c2 - 1 + (l2 - 1) * t2], o.addConstraint(e2, r.create(a.extend({ bodyA: p, bodyB: d }, s2)))), i2 && c2 < t2 - 1 && (p = f[c2 + 1 + (l2 - 1) * t2], o.addConstraint(e2, r.create(a.extend({ bodyA: p, bodyB: d }, s2))));
          }
          return e2.label += " Mesh", e2;
        }, i.pyramid = function(e2, t2, n2, o2, r2, a2, l2) {
          return i.stack(e2, t2, n2, o2, r2, a2, function(t3, i2, a3, c2, u, d) {
            var p = Math.min(o2, Math.ceil(n2 / 2)), f = u ? u.bounds.max.x - u.bounds.min.x : 0;
            if (!(c2 > p || a3 < (c2 = p - c2) || a3 > n2 - 1 - c2))
              return 1 === d && s.translate(u, { x: (a3 + (n2 % 2 == 1 ? 1 : -1)) * f, y: 0 }), l2(e2 + (u ? a3 * f : 0) + a3 * r2, i2, a3, c2, u, d);
          });
        }, i.newtonsCradle = function(e2, t2, n2, i2, a2) {
          for (var s2 = o.create({ label: "Newtons Cradle" }), c2 = 0; c2 < n2; c2++) {
            var u = l.circle(e2 + c2 * (1.9 * i2), t2 + a2, i2, { inertia: 1 / 0, restitution: 1, friction: 0, frictionAir: 1e-4, slop: 1 }), d = r.create({ pointA: { x: e2 + c2 * (1.9 * i2), y: t2 }, bodyB: u });
            o.addBody(s2, u), o.addConstraint(s2, d);
          }
          return s2;
        }, c(i, "newtonsCradle", "Composites.newtonsCradle \u27A4 moved to newtonsCradle example"), i.car = function(e2, t2, n2, i2, a2) {
          var c2 = s.nextGroup(true), u = 0.5 * -n2 + 20, d = 0.5 * n2 - 20, p = o.create({ label: "Car" }), f = l.rectangle(e2, t2, n2, i2, { collisionFilter: { group: c2 }, chamfer: { radius: 0.5 * i2 }, density: 2e-4 }), v = l.circle(e2 + u, t2 + 0, a2, { collisionFilter: { group: c2 }, friction: 0.8 }), m = l.circle(e2 + d, t2 + 0, a2, { collisionFilter: { group: c2 }, friction: 0.8 }), y = r.create({ bodyB: f, pointB: { x: u, y: 0 }, bodyA: v, stiffness: 1, length: 0 }), g = r.create({ bodyB: f, pointB: { x: d, y: 0 }, bodyA: m, stiffness: 1, length: 0 });
          return o.addBody(p, f), o.addBody(p, v), o.addBody(p, m), o.addConstraint(p, y), o.addConstraint(p, g), p;
        }, c(i, "car", "Composites.car \u27A4 moved to car example"), i.softBody = function(e2, t2, n2, o2, r2, s2, c2, u, d, p) {
          d = a.extend({ inertia: 1 / 0 }, d), p = a.extend({ stiffness: 0.2, render: { type: "line", anchors: false } }, p);
          var f = i.stack(e2, t2, n2, o2, r2, s2, function(e3, t3) {
            return l.circle(e3, t3, u, d);
          });
          return i.mesh(f, n2, o2, c2, p), f.label = "Soft Body", f;
        }, c(i, "softBody", "Composites.softBody \u27A4 moved to softBody and cloth examples");
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(3), r = n(7), a = n(12), s = n(4), l = n(13), c = n(8), u = n(5), d = n(0), p = n(1);
        i.create = function(e2, t2) {
          var n2 = (e2 ? e2.mouse : null) || (t2 ? t2.mouse : null);
          n2 || (e2 && e2.render && e2.render.canvas ? n2 = a.create(e2.render.canvas) : t2 && t2.element ? n2 = a.create(t2.element) : (n2 = a.create(), d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));
          var o2 = { type: "mouseConstraint", mouse: n2, element: null, body: null, constraint: c.create({ label: "Mouse Constraint", pointA: n2.position, pointB: { x: 0, y: 0 }, length: 0.01, stiffness: 0.1, angularStiffness: 1, render: { strokeStyle: "#90EE90", lineWidth: 3 } }), collisionFilter: { category: 1, mask: 4294967295, group: 0 } }, r2 = d.extend(o2, t2);
          return s.on(e2, "beforeUpdate", function() {
            var t3 = u.allBodies(e2.world);
            i.update(r2, t3), i._triggerEvents(r2);
          }), r2;
        }, i.update = function(e2, t2) {
          var n2 = e2.mouse, i2 = e2.constraint, a2 = e2.body;
          if (0 === n2.button) {
            if (i2.bodyB)
              r.set(i2.bodyB, false), i2.pointA = n2.position;
            else
              for (var c2 = 0; c2 < t2.length; c2++)
                if (a2 = t2[c2], p.contains(a2.bounds, n2.position) && l.canCollide(a2.collisionFilter, e2.collisionFilter))
                  for (var u2 = a2.parts.length > 1 ? 1 : 0; u2 < a2.parts.length; u2++) {
                    var d2 = a2.parts[u2];
                    if (o.contains(d2.vertices, n2.position)) {
                      i2.pointA = n2.position, i2.bodyB = e2.body = a2, i2.pointB = { x: n2.position.x - a2.position.x, y: n2.position.y - a2.position.y }, i2.angleB = a2.angle, r.set(a2, false), s.trigger(e2, "startdrag", { mouse: n2, body: a2 });
                      break;
                    }
                  }
          } else
            i2.bodyB = e2.body = null, i2.pointB = null, a2 && s.trigger(e2, "enddrag", { mouse: n2, body: a2 });
        }, i._triggerEvents = function(e2) {
          var t2 = e2.mouse, n2 = t2.sourceEvents;
          n2.mousemove && s.trigger(e2, "mousemove", { mouse: t2 }), n2.mousedown && s.trigger(e2, "mousedown", { mouse: t2 }), n2.mouseup && s.trigger(e2, "mouseup", { mouse: t2 }), a.clearSourceEvents(t2);
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(2), r = n(14), a = n(1), s = n(11), l = n(3);
        i.collides = function(e2, t2) {
          for (var n2 = [], i2 = 0; i2 < t2.length; i2++) {
            var o2 = t2[i2];
            if (a.overlaps(o2.bounds, e2.bounds))
              for (var s2 = 1 === o2.parts.length ? 0 : 1; s2 < o2.parts.length; s2++) {
                var l2 = o2.parts[s2];
                if (a.overlaps(l2.bounds, e2.bounds)) {
                  var c = r.collides(l2, e2);
                  if (c.collided) {
                    n2.push(c);
                    break;
                  }
                }
              }
          }
          return n2;
        }, i.ray = function(e2, t2, n2, r2) {
          r2 = r2 || 1e-100;
          for (var a2 = o.angle(t2, n2), l2 = o.magnitude(o.sub(t2, n2)), c = 0.5 * (n2.x + t2.x), u = 0.5 * (n2.y + t2.y), d = s.rectangle(c, u, l2, r2, { angle: a2 }), p = i.collides(d, e2), f = 0; f < p.length; f += 1) {
            var v = p[f];
            v.body = v.bodyB = v.bodyA;
          }
          return p;
        }, i.region = function(e2, t2, n2) {
          for (var i2 = [], o2 = 0; o2 < e2.length; o2++) {
            var r2 = e2[o2], s2 = a.overlaps(r2.bounds, t2);
            (s2 && !n2 || !s2 && n2) && i2.push(r2);
          }
          return i2;
        }, i.point = function(e2, t2) {
          for (var n2 = [], i2 = 0; i2 < e2.length; i2++) {
            var o2 = e2[i2];
            if (a.contains(o2.bounds, t2))
              for (var r2 = 1 === o2.parts.length ? 0 : 1; r2 < o2.parts.length; r2++) {
                var s2 = o2.parts[r2];
                if (a.contains(s2.bounds, t2) && l.contains(s2.vertices, t2)) {
                  n2.push(o2);
                  break;
                }
              }
          }
          return n2;
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(4), r = n(18), a = n(0);
        !function() {
          var e2, t2, n2;
          ("undefined" != typeof window && (e2 = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame, t2 = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame), e2) || (e2 = function(e3) {
            n2 = setTimeout(function() {
              e3(a.now());
            }, 1e3 / 60);
          }, t2 = function() {
            clearTimeout(n2);
          });
          i.create = function(e3) {
            var t3 = a.extend({ fps: 60, correction: 1, deltaSampleSize: 60, counterTimestamp: 0, frameCounter: 0, deltaHistory: [], timePrev: null, timeScalePrev: 1, frameRequestId: null, isFixed: false, enabled: true }, e3);
            return t3.delta = t3.delta || 1e3 / t3.fps, t3.deltaMin = t3.deltaMin || 1e3 / t3.fps, t3.deltaMax = t3.deltaMax || 1e3 / (0.5 * t3.fps), t3.fps = 1e3 / t3.delta, t3;
          }, i.run = function(t3, n3) {
            return void 0 !== t3.positionIterations && (n3 = t3, t3 = i.create()), function o2(r2) {
              t3.frameRequestId = e2(o2), r2 && t3.enabled && i.tick(t3, n3, r2);
            }(), t3;
          }, i.tick = function(e3, t3, n3) {
            var i2, a2 = t3.timing, s = 1, l = { timestamp: a2.timestamp };
            o.trigger(e3, "beforeTick", l), e3.isFixed ? i2 = e3.delta : (i2 = n3 - e3.timePrev || e3.delta, e3.timePrev = n3, e3.deltaHistory.push(i2), e3.deltaHistory = e3.deltaHistory.slice(-e3.deltaSampleSize), s = (i2 = (i2 = (i2 = Math.min.apply(null, e3.deltaHistory)) < e3.deltaMin ? e3.deltaMin : i2) > e3.deltaMax ? e3.deltaMax : i2) / e3.delta, e3.delta = i2), 0 !== e3.timeScalePrev && (s *= a2.timeScale / e3.timeScalePrev), 0 === a2.timeScale && (s = 0), e3.timeScalePrev = a2.timeScale, e3.correction = s, e3.frameCounter += 1, n3 - e3.counterTimestamp >= 1e3 && (e3.fps = e3.frameCounter * ((n3 - e3.counterTimestamp) / 1e3), e3.counterTimestamp = n3, e3.frameCounter = 0), o.trigger(e3, "tick", l), o.trigger(e3, "beforeUpdate", l), r.update(t3, i2, s), o.trigger(e3, "afterUpdate", l), o.trigger(e3, "afterTick", l);
          }, i.stop = function(e3) {
            t2(e3.frameRequestId);
          }, i.start = function(e3, t3) {
            i.run(e3, t3);
          };
        }();
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        n(1);
        var o = n(0);
        i.pathToVertices = function(e2, t2) {
          "undefined" == typeof window || "SVGPathSeg" in window || o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");
          var n2, r, a, s, l, c, u, d, p, f, v, m = [], y = 0, g = 0, x = 0;
          t2 = t2 || 15;
          var h = function(e3, t3, n3) {
            var i2 = n3 % 2 == 1 && n3 > 1;
            if (!p || e3 != p.x || t3 != p.y) {
              p && i2 ? (f = p.x, v = p.y) : (f = 0, v = 0);
              var o2 = { x: f + e3, y: v + t3 };
              !i2 && p || (p = o2), m.push(o2), g = f + e3, x = v + t3;
            }
          }, b = function(e3) {
            var t3 = e3.pathSegTypeAsLetter.toUpperCase();
            if ("Z" !== t3) {
              switch (t3) {
                case "M":
                case "L":
                case "T":
                case "C":
                case "S":
                case "Q":
                  g = e3.x, x = e3.y;
                  break;
                case "H":
                  g = e3.x;
                  break;
                case "V":
                  x = e3.y;
              }
              h(g, x, e3.pathSegType);
            }
          };
          for (i._svgPathToAbsolute(e2), a = e2.getTotalLength(), c = [], n2 = 0; n2 < e2.pathSegList.numberOfItems; n2 += 1)
            c.push(e2.pathSegList.getItem(n2));
          for (u = c.concat(); y < a; ) {
            if ((l = c[e2.getPathSegAtLength(y)]) != d) {
              for (; u.length && u[0] != l; )
                b(u.shift());
              d = l;
            }
            switch (l.pathSegTypeAsLetter.toUpperCase()) {
              case "C":
              case "T":
              case "S":
              case "Q":
              case "A":
                s = e2.getPointAtLength(y), h(s.x, s.y, 0);
            }
            y += t2;
          }
          for (n2 = 0, r = u.length; n2 < r; ++n2)
            b(u[n2]);
          return m;
        }, i._svgPathToAbsolute = function(e2) {
          for (var t2, n2, i2, o2, r, a, s = e2.pathSegList, l = 0, c = 0, u = s.numberOfItems, d = 0; d < u; ++d) {
            var p = s.getItem(d), f = p.pathSegTypeAsLetter;
            if (/[MLHVCSQTA]/.test(f))
              "x" in p && (l = p.x), "y" in p && (c = p.y);
            else
              switch ("x1" in p && (i2 = l + p.x1), "x2" in p && (r = l + p.x2), "y1" in p && (o2 = c + p.y1), "y2" in p && (a = c + p.y2), "x" in p && (l += p.x), "y" in p && (c += p.y), f) {
                case "m":
                  s.replaceItem(e2.createSVGPathSegMovetoAbs(l, c), d);
                  break;
                case "l":
                  s.replaceItem(e2.createSVGPathSegLinetoAbs(l, c), d);
                  break;
                case "h":
                  s.replaceItem(e2.createSVGPathSegLinetoHorizontalAbs(l), d);
                  break;
                case "v":
                  s.replaceItem(e2.createSVGPathSegLinetoVerticalAbs(c), d);
                  break;
                case "c":
                  s.replaceItem(e2.createSVGPathSegCurvetoCubicAbs(l, c, i2, o2, r, a), d);
                  break;
                case "s":
                  s.replaceItem(e2.createSVGPathSegCurvetoCubicSmoothAbs(l, c, r, a), d);
                  break;
                case "q":
                  s.replaceItem(e2.createSVGPathSegCurvetoQuadraticAbs(l, c, i2, o2), d);
                  break;
                case "t":
                  s.replaceItem(e2.createSVGPathSegCurvetoQuadraticSmoothAbs(l, c), d);
                  break;
                case "a":
                  s.replaceItem(e2.createSVGPathSegArcAbs(l, c, p.r1, p.r2, p.angle, p.largeArcFlag, p.sweepFlag), d);
                  break;
                case "z":
                case "Z":
                  l = t2, c = n2;
              }
            "M" != f && "m" != f || (t2 = l, n2 = c);
          }
        };
      }, function(e, t, n) {
        var i = {};
        e.exports = i;
        var o = n(5);
        n(0);
        i.create = o.create, i.add = o.add, i.remove = o.remove, i.clear = o.clear, i.addComposite = o.addComposite, i.addBody = o.addBody, i.addConstraint = o.addConstraint;
      }]);
    });
  }
});
export default require_matter();
//# sourceMappingURL=matter-js.js.map
